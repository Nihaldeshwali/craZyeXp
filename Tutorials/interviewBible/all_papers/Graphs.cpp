/*
  Name: Graph Program
  Copyright: Interview Bible
  Author: 
  Date: 07/03/14 22:58
  Description:  All linkedlist prgram in place
  
  Table of Contents:
      1. Convert Arry to list
      2.
      3.
      
*/


#include<stdio.h>


/*******************************************************************************
* Problem 99 : Rpresent And Print Graph : Ajency Matrix and Adjanency List
* Input:
* Output:
* Algorithms:
*******************************************************************************/


/*******************************************************************************
* Problem 100 : DFS Algorithms using 1. Stach 2. Recursion O(V+E)
* Input:
* Output:
* Algorithms:
*******************************************************************************/



/*******************************************************************************
* Problem 101 : BFS Algorithms uisng Queue O(V+E)
* Input:
* Output:
* Algorithms:
*******************************************************************************/



/*******************************************************************************
* Problem 102 : Topological Sort of a grapg uisng DFS O(V+E)
* Input:
* Output:
* Algorithms:
*******************************************************************************/



/*******************************************************************************
* Problem  103 : Single Source Shorted path in a unwaighted graph -BFS O(V+E) 
* Input:
* Output:
* Algorithms: Use Queue
*******************************************************************************/



/*******************************************************************************
* Problem 104 :Single source Shortest path Waighted Graph (Djkastra ) O(ElgE) 
* Input:
* Output:
* Algorithms: Use Prarity Queue
*******************************************************************************/



/*******************************************************************************
* Problem 105:  Single Souce Shortest Path with -Ve Edge - BellManford O(V*E)
* Input:
* Output:
* Algorithms: use Queue
*******************************************************************************/



/*******************************************************************************
* Problem 106 :  Primis Algorithms for MST O(ElgV)
* Input:
* Output:
* Algorithms: using Pririty Queue
*******************************************************************************/



/*******************************************************************************
* Problem 107 : Kruscal Algorithms for MST O(ElgE)
* Input:
* Output:
* Algorithms:Sorting
*******************************************************************************/



/*******************************************************************************
* Problem 108 : Amximum waigted Spanning Tree. 
* Input:
* Output:
* Algorithms:
*******************************************************************************/



/*******************************************************************************
* Problem 109 : Second Minimum Spaning tree. 
* Input:
* Output:
* Algorithms:
*******************************************************************************/



/*******************************************************************************
* Problem 110 : Find Simaple path from S to T 
* Input:
* Output:
* Algorithms: DFS
*******************************************************************************/



/*******************************************************************************
* Problem 111: Count Simple path from S to T 
* Input:
* Output:
* Algorithms: DFS with counter
*******************************************************************************/



/*******************************************************************************
* Problem 112 : All Pair Shortest path 
* Input:
* Output:
* Algorithms: Floyed Warsall Algorithms
*******************************************************************************/



/*******************************************************************************
* Problem 113 : Finding All Cut-verties using DFS 
* Input:
* Output:
* Algorithms: N/A/
*******************************************************************************/



/*******************************************************************************
* Problem 114 : Finding all Cut-sets uisng DFS 
* Input:
* Output:
* Algorithms: N/A
*******************************************************************************/



/*******************************************************************************
* Problem 115 : Find Eular Circut using DFS 
* Input:
* Output:
* Algorithms:
*******************************************************************************/



/*******************************************************************************
* Problem 116 : Find Strongly Connected Componenet using DFS 
* Input:
* Output:
* Algorithms:
*******************************************************************************/



/*******************************************************************************
* Problem 117 : FInd Number of Conneced compnonet using DFS. 
* Input:
* Output:
* Algorithms: Call DFS () untill all vertices are visied/
*******************************************************************************/



/*******************************************************************************
* Problem 118 :  Find Any Spanning TRee of a graph
* Input:
* Output:
* Algorithms: Use BFS algo
*******************************************************************************/



/*******************************************************************************
* Problem 119 : Detect a Cycle in a undirected graph  
* Input:
* Output:
* Algorithms: Check for back edge using DFS
*******************************************************************************/



/*******************************************************************************
* Problem 120 : Detect a Cycle in a Dag 
* Input:
* Output:
* Algorithms: N/A
*******************************************************************************/



/*******************************************************************************
* Problem 121 : Find Dept of a DAG 
* Input:
* Output:
* Algorithms: use BFS
*******************************************************************************/



/*******************************************************************************
* Problem 122 :  Find Topological short of a grah is Unique ot NOT
* Input:
* Output:
* Algorithms: Check fro Hamiltonian Cycle ?
*******************************************************************************/



/*******************************************************************************
* Problem 123/124 : Find LCA nd print the Ancenstarl path of two vertices in a DAG 
* Input:
* Output:
* Algorithms:
*******************************************************************************/



/*******************************************************************************
* Problem 125 : Check two Grph Are ISOmorpice of NOT
* Input:
* Output:
* Algorithms:N/A
*******************************************************************************/



/*******************************************************************************
* Problem 126/127 : Theroy 
/*******************************************************************************
* Problem 128 : Find Hamiltonian Path of Graph 
* Input:
* Output:
* Algorithms: Backtracing
*******************************************************************************/



/*******************************************************************************
* Problem 129 : Find Hemeltonial Cyycle of a graph 
* Input:
* Output:
* Algorithms: Backtracing
*******************************************************************************/



/*******************************************************************************
* Problem 130 : TSP problems 
* Input:
* Output:
* Algorithms: Synamic Programming 2. Apploximation Algo
*******************************************************************************/



/*******************************************************************************
* Problem 131 : Graph Bipatite or Not 
* Input:
* Output:
* Algorithms: N/A
*******************************************************************************/


 
/*******************************************************************************
* Problem 132 : Find Perfecat Matching in  Graph 
* Input:
* Output:
* Algorithms: N/A
*******************************************************************************/



/*******************************************************************************
* Problem 133 : Test Planinnger Graph 
* Input:
* Output:
* Algorithms: N/A
*******************************************************************************/



/*******************************************************************************
* Problem 134  :  Find Mximum Cleue
* Input:
* Output:
* Algorithms: N/A
*******************************************************************************/



/*******************************************************************************
* Problem 135 : Find Chromatic Number  
* Input:
* Output:
* Algorithms: N/A
*******************************************************************************/



/*******************************************************************************
* Problem 136 : Checing for K-coloribility ? 
* Input:
* Output:
* Algorithms: N/A
*******************************************************************************/



/*******************************************************************************
* Problem 137 : Find Sink of a Graph  
* Input:
* Output:
* Algorithms: Aj[][] Matrix text
*******************************************************************************/



/*******************************************************************************
* Problem 138 : Find AMximul matching Algo 
* Input:
* Output:
* Algorithms: N/A
*******************************************************************************/



/*******************************************************************************
* Problem 139 : Find Minimum Covering Algo 
* Input:
* Output:
* Algorithms: NA
*******************************************************************************/



/*******************************************************************************
* Problem 140 : Find Maximum Indipendent Set of a Graph 
* Input:
* Output:
* Algorithms:
*******************************************************************************/



/*******************************************************************************
* Problem 142 : Solve 3/4 Colorabilty Problem  
* Input:
* Output:
* Algorithms:
*******************************************************************************/


/*******************************************************************************
* Problem  143 : Generte Dual of Graph
* Input:
* Output:
* Algorithms: N/A
*******************************************************************************/

/*******************************************************************************
* Problem  : Maximum Network Flow Problem
* Input:
* Output:
* Algorithms:
*******************************************************************************/
/*******************************************************************************
* Problem  :
* Input:
* Output:
* Algorithms:
*******************************************************************************/
/*******************************************************************************
* Problem  :
* Input:
* Output:
* Algorithms:
*******************************************************************************/
/*******************************************************************************
* Problem  :
* Input:
* Output:
* Algorithms:
*******************************************************************************/
/*******************************************************************************
* Problem  :
* Input:
* Output:
* Algorithms:
*******************************************************************************/
/*******************************************************************************
* Problem  :
* Input:
* Output:
* Algorithms:
*******************************************************************************/







int main()
{
    printf("**************** Problem of Graph **************\n\n");
    
    
    
    printf("****************** [ E N D ] *******************\n\n");

}    

