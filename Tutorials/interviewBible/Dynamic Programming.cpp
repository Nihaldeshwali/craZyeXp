/*
  Name: Dynamic Prgramming Program
  Copyright: Interview Bible
  Author: 
  Date: 07/03/14 22:58
  Description:  All linkedlist prgram in place
  
  Table of Contents:
      1. Convert Arry to list
      2.
      3.
      
*/


#include<stdio.h>
#include<conio.h>

#define MAX 9999

/*******************************************************************************
* Problem 1: Fibonacci Series
* I/O:
* Algorithms: f(i) = f(i-1) + f(i-2)
*******************************************************************************/
int fib(int n)
{
	int cache[MAX] = {0};
	cache[0]=0;
	cache[1] =1;
	for (int i =2;i<=n;i++)
	  cache[i]= cache[i-1]+cache[i-2];
	return cache[n];	
}


/*******************************************************************************
* Problem 2: Ugly Number
* I/O:
* Algorithms: U[i] =min{ 2*U[x],3*U[y],5*U[z] } whre x, y z are the correct pointer to 2,3,5, multiplier
*******************************************************************************/
#define MIN(x,y) ((x<y)? x : y)


int ugly(int n)
{
	int U[MAX]={0};
	int x,y,z;
	x=y=z=1; 
	U[1]=1; /* We will not use 0th Index. */
	
	for (int i=2;i<=n;i++)
	{
		U[i] = MIN(2*U[x],MIN(3*U[y],5*U[z]));
		
		if (U[i]== 2* U[x]) x++;
		if(U[i] == 3* U[y]) y++;
		if(U[i] == 5* U[z]) z++;
	}
	return U[n];

}

/*******************************************************************************
* Problem 3: Find the count of  N-digit Lucky Number, doesnt conayin 13
* I/O:
* Algorithms:
f(i) : count  of N-digit  lucy number 
f(i) = f(i-1)*10 - f(i-2) # fill i-1  
 
*******************************************************************************/

int luckyCount(int n)
{
	long long f[MAX]={0};
	
	f[1] = 9; // Donest include ZERo
	f[2] = 100 -10 -1; // Doesnt include 0-9 and 13
	
	for (int i=3;i<=n;i++)
	{
		f[i] = f[i-1] * 10 - f[i-2];
	} 
	return f[n];
}

/*******************************************************************************
* Problem 4:  Count N-digt , K based Valid Number donesnt have TWO consicutive Zero
* I/O:
* Algorithms: 
Z(1) = 1; NZ(1) = k-1;
Z(2) = k-1 ; NZ(2) = k*(k-1)-1;
Z(i) = NZ(i-1)*1
NZ(i) = (k-1)* { Z[i-1] + NZ(i-1) }

*******************************************************************************/

int validNumber(int n, int k)
{
	long Z[MAX] = {0};
	long NZ[MAX] = {0};
	
	Z[1]=1;  NZ[1]= k-1;
	Z[2]= k-1; NZ[2]= (k-1)*(k-1);
	for (int i=3;i<=n;i++)
	{
		Z[i] = NZ[i-1];
		NZ[i]= (k-1)*(Z[i-1] + NZ[i-1]);
	}
    return Z[n]+NZ[n];

}

/*******************************************************************************
* Problem 5: Flag Problem, We have a Color strope of RED,WHITE,BLUE, count number of way to make flag having n stipe.
having 1) Stipe of same color cannot be placed next to each other
2) blue must be in White and REd or RED or WHITE
* I/O:
* Algorithms:
1. let f(i,w),f(i,r),f(i,b) be the number of valid i length flag ending with w,r,or b resptectvly
2. Ans = f(n,w)+f(i,r)
3. f(i,w) = ?
*******************************************************************************/

/*******************************************************************************
* Problem 6: [ Minimum Sum of squire ]
Given a sequnece of n number, find the minimum sum of squire of grough of 2,3 and 4 from N number. 
* I/O:
* Algorithms:
f(i) : mimimum SOS a[1...i]
f(1) = 0
f(2) =(a1+a2)2
f(3) =(a1+a2+a3)^2
f(4) = min { (a1+a2)2 +(a3+a4)2 , (a1+a2+a3+a4)2 }
f(i) = min {
       (ai+ai-1+ai-2+ai-3)2+f(i-4),
       (Ai+Ai-1 + Ai-2)2 +f(i-3),
       ..
   }
*******************************************************************************/

/*******************************************************************************
* Problem 7: Tri-Tiling
How many way you can make 3 X N retecgle with 2 X1 rect ? 
* I/O:
* Algorithms: N/A
*******************************************************************************/

/*******************************************************************************
* Problem 8: Count Special Number of from 1 to N, A number is spacial if it's binary donet have equla number 
0 and 1. 
* I/O:
* Algorithms:
1. Let's say N is power of 2, then m is log(N) bit's
2. if m is odd, No solution
3. find number of Special number of t-bit
3a. MST of t-bit should be 1:
3.b how to fill up t-1 bit's by t/2 zero and t-1/2 one. => (t-1)!/(t/2)!*(t/2-1)! =>f(t)
4. find f(t+2) and express it f(t)
5. f(t) = 4*(t-1)/t *f(t-2) with f(2) = 1 ( that is 11 only)
6. Ans = f(2)+f(4)+f(6) ...F(m) 

*******************************************************************************/

/*******************************************************************************
* Problem 9:  Count NDD ( Non-decresing -digits)
find number of NDD of length n, whre digit's are in non-decresing order.
* I/O:
* Algorithms:
1. Say input : <x1,x2,x3...xn>
2. f(i,x) is the count of NDD of length i, ending with x [0,9]
3. f(1,X) = 1  X =[0,9]
4. f(i,j) = sum ( f(i-1,t) ) for t = 0..j
5. Ans = sum(f(n,x)) x=[0,9]
*******************************************************************************/

/*******************************************************************************
* Problem 10: Archer's Traval: Given a chess board M X N. Initilly Archar sit in (1,1)
 Cout the number of way it can visit all the cell in chess board exctly once and back to (1,1)
* I/O:
* Algorithms: N/A
*******************************************************************************/

/*******************************************************************************
* Problem 11: Boolean Parenthesis: Given a extression of T and F with AND, OR, XOR.
count number of way do parethesis haviing a Expression value id True 
* I/O:
* Algorithms:
1. Define T(i,j)/F(i,j) Count of parenthesis of getting True/False of expression<xi,xj>
2. T(i,i) = 1 if xi is True or else 0, same dfor F(i,i) i=[0,n]
3. Define teh rule like ..T(M AND N)= T(M) *T(N)
ex for OR opeator at k location:
T(i,j) = sum (T(i,k) * T(k+1,i) + T(i,k)*F(k+1,j) + F(i,k) *T(k+1,j) ) for k =[i,j-1]
4 Chaninging it of length 1,2,3...N.
4.Ans = T[1,n]
 
*******************************************************************************/

/*******************************************************************************
* Problem 12 : Logest palindrome Substring 
* I/O:
* Algorithms:
1. input <x1...xn>
2. f(i,j) max length palindome inside <ai..aj>
3. f(i,i) = True  ; i=[1,n]
   f(i,i+1) = True if a[i]==a[i+1] else Fase.
   f(i,j) = True if a[i] ==a[j] && f(i+1,j-1) else False
4. keep trace max_len in calculation of length 1->2->3....->n

*******************************************************************************/

/*******************************************************************************
* Problem 13: Longest palindome Sun-sequences. 
* I/O:
* Algorithms:
1. input <x1...xn>
2. f(i,j) max length palindome sub-sequnece inside <ai..aj>
3. f(i,i) = 1  ; i=[1,n]
   f(i,i+1) = 2 if a[i]==a[i+1] else 2.
   f(i,j) = f(i+1,j-1)+2  if a[i] ==a[j]  
   f(i,j) = max( f(i+1,j) , f(i,j-1)  if a[i] !=a[j]  
4. return f(1,n)
*******************************************************************************/

/*******************************************************************************
* Problem 14: Maximize an Expreesion having +,*
* I/O:
* Algorithms:
1. input <x1...xn>
2. f(i,j) max value while evalution <ai..aj>
3. f(i,i) = ai
   f(i,i+1) = a[i] Op a[i+1]
   f(i,j) =  max ( f(i,k) op f( k+1,j) ) for k in [i..j-1]
4. return f(1,n)
*******************************************************************************/

/*******************************************************************************
* Problem 14A: Maximize an Expreesion having +,*, - 
* I/O:
* Algorithms:
Only max(i,j) cannot solve the probme.
*******************************************************************************/

/*******************************************************************************
* Problem 15: Maximize chain Devison.
Maximize a1/a2/a3/a4/a4/ 
* I/O:
* Algorithms:
1. input <x1...xn>
2. max(i,j) max value while evalution <ai..aj> 
   min(i,j) find min value.
3. min=max(i,i) = ai
   min = max(i,i+1) = a[i] Op a[i+1]
   max(i,j) =  max ( max(i,k) / min( k+1,j) ) for k in [i..j-1]
   min(i,j) =  min ( min(i,k) / max( k+1,j) ) for k in [i..j-1]
4. return max(1,n)
*******************************************************************************/

/*******************************************************************************
* Problem 16: Matrix Chain Multiplication.
Given a Set of matrix A1, A1, A2....An and arry d[0,n]
Ai having  d[i-1] * d[i]
How to do multipliaction such that minimum scalar matiplication can be done.
* I/O:
* Algorithms:
1. input <x1...xn>
2. f(i,j) min value while evalution <ai..aj> 
3. f(i,i) = 0 // No scalar multiplications
   f(i,i+1) = d[i-1] * d[i]*d[i+1]
   f(i,j) =  min ( f(i,k) + f( k+1,j) +d[i-1] *d[k]*d[j] ) for k in [i..j-1]
4. return f(1,n)
*******************************************************************************/

/*******************************************************************************
* Problem 17: Safe Salutation.
Given 2N persion , in a round table, find number of way to do N-hanskake without cross-over
* I/O:
* Algorithms:
1. Lets we a <a1....aN>
2. Chosse an persion i , it can do handshak to n/2 way such that both size must have even ppl.
3. so while handsaking it devide group like <0,N-2>,<2,N-2>,<N-2,0>
let f(i) be the number of such counts.
f(0) = 0 and f(1) =1.
f(i) = sum {f(i) * f(N-2-i)} for i [0,n-2]
return f(n)
Q. Is there any duplicates?
*******************************************************************************/

/*******************************************************************************
* Problem 18: Count Different Binary Free having N-Node.? 
* I/O:
* Algorithms:
Note : binary Tree + node Level matter + left-right chlid matters
1. Let's have level X=[1,2,3...N]
2. Any one can be root and It devide into two parts.
3. let's f(i) count kind of BT
4. f(0) =1; //it;s a Null Tree.
f(1) = 1
f(2) = 4 // as 
f(i) =sum (f(k) *f(n-1-K) for k [0..n-1]
4. Now We can arrage [1..N] in n! way.
5. Ans : n! * f(n)
*******************************************************************************/

/*******************************************************************************
* Problem 18A: Count the number of BST ? 
* I/O:
* Algorithms: Just like Same but no need to multiplication of n!
3. let's f(i) count kind of BST
4. f(0) =1; //it;s a Null Tree.
f(1) = 1
f(2) = 4 // as 
f(i) =sum (f(k) *f(n-1-K) for k [0..n-1]
*******************************************************************************/

/*******************************************************************************
* Problem 19: Count the number of balace of bracking of with N Parenthesis
* I/O:
* Algorithms:
two Rule
1. there is only one way to get parnethesis when there is no brack => it's null :)
2. if N pairs then We can something like A.(B) where total brack used in A and B is N-1

a. let's say f(i) indicate parenthesi of i pairs.
b. f(0) =1
c. f(i) = sum( f(k) * f(i-1 -k)} k =[0...i-1]
d. return f(n)
*******************************************************************************/

/*******************************************************************************
* Problem 20: Count the number of balace patrebthesif of (),{}, and [] in porper oder that
no [] or {} inside ()
no [] insiide {} 
* I/O:
* Algorithms: NA
*******************************************************************************/

/*******************************************************************************
* Problem 21: repeat the Q20 , where max depth allowed to d. 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem 20: Count all Binary Brackingthing. 
* I/O: ex. ABC =((AB)C),(A(BC)) =>2
* Algorithms:
b(i) = count of binary brcking when we have i simbol.
b(0) = b(1) =0
b(2) = 1//(AB)
b(i) = sum { b(k) * b(n-K)} , whre k =[1..n-1], we are placing Devition at k position, such that each side at lease 1 Simbols.

*******************************************************************************/

/*******************************************************************************
* Problem 20 A: Count all Non_binary Bracking. 
* I/O:
* Algorithms:
Non-Binary means ATLEASET one operation is Ternary or more. Like ABC => (ABC) =>1 way
a. find b(i) for each i= 0,1,,,,n
b.  let t(i) indicete no-binary bracing.
t(0)=t(1) =t(2) = 0
t(3) = 1

t(i) = Sum {
        b(k) *t(n-k)+  //left bin and righ non-bin
        t(k) *b(n-k)+   // left non-bin and rught bin
        t(k) *t(n-k) +  // both non-bin
      }
      k =1...N-1

*******************************************************************************/

/*******************************************************************************
* Problem 21: Composition Table.
Given a Composition table C[n*n] and a expression <x1...xn>  find it is can be reduced to S using composiotion table. 
* I/O:
* Algorithms:
lets; define a fucntion f(i,j,a) = true if x[i..j] can be reduce to a , else False.
1. Crete a table T[N][N][S]={False}
2. Start of chain length 1. 
3. f(i,i+1,s) = True if x[i]*x[i+1] =s else False.
4. f(i,j,s) = True if OR [f(i,k,a) && f(k+1,j,b)] for all production a*b=s // We should crete a map.
5. return f(1,n,S) 

*******************************************************************************/

/*******************************************************************************
* Problem 22: String Reconstractuon. We have a senences having all space remove, recotscat it when a dict is given to you. 
* I/O:
* Algorithms:
1. input <x1.x2....xn>
2. f(i,i) = true if xi in DICT
3. f(i,i+1) true if x[i:i+1] in DICT
4. f(i,j) = DICT(x[i:j]) OR [OR{ f(i,k) && f(k+1,j)}] for k = [i..j-1]
5. return f(1,n)
*******************************************************************************/

/*******************************************************************************
* Problem 22 A: Max word String Reconstractuon. We have a senences having all space remove, recotscat it with max possble word when a dict is given to you. 
* I/O:
* Algorithms:
1. input <x1.x2....xn>
2. f(i,i) = 1 if xi in DICT
3. f(i,i+1) 1 if x[i:i+1] in DICT
4. f(i,j) = max { 1 if DICT(x[i:j]) , [max { f(i,k) + f(k+1,j)}] for k = [i..j-1]
5. return f(1,n)
*******************************************************************************/

/*******************************************************************************
* Problem 22 B: count the way  word String Reconstractuon. We have a senences having all space remove, how many way u can recotscat it  when a dict is given to you. 
* I/O:
* Algorithms:
1. input <x1.x2....xn>
2. f(i,i) = 1 if xi in DICT
3. f(i,i+1) 1 if x[i:i+1] in DICT
4. f(i,j) = SUM{ 1 if DICT(x[i:j]) + [SUM { f(i,k) * f(k+1,j)}] for k = [i..j-1]
5. return f(1,n)
*******************************************************************************/

/*******************************************************************************
* Problem 23: Optimal String Cut-Copy 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem 24:  CFL Recognizier.
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem 25: Minimal Substritution in CFL parser. 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem 26: Optimal BST 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem 27: Minimum Waight Traingulalization
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem 28: Transitive Clouse of a Grpahn :Warsal Ago
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem 29 : All pair shoretst path : Floyed Algo 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem 30: String Conversion using fixed cache. 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem 31: Arbitarage problems: Stock Exchnage
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem 32: Jack Staws Puzzle.
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem 33: DOT Games. 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem 34: Gold Pickup Games.
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem 35: Astrik Problem 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem 36 : Recognize Scrambled Strings  
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem 37 : Minim Insertion to make palindome. 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem 38 : Maximum Palindoemin a String
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/

/*******************************************************************************
* Problem : 
* I/O:
* Algorithms:
*******************************************************************************/



int main()
{
    printf("**************** Problem of Array **************\n\n");
    
    printf("\n fib(5): %d",fib(5));
    printf("\n fib(10): %d",fib(10));
    printf("\n fib(15): %d",fib(15));
    printf("\n fib(150): %d",fib(150));
    
    printf("\n\n ugly(5): %d",ugly(5));
    printf("\n ugly(10): %d",ugly(10));
    printf("\n ugly(15): %d",ugly(15));
    printf("\n ugly(150): %d",ugly(150));

    printf("\n\n luckyCount(3): %d",luckyCount(3));
    printf("\n luckyCount(10): %d",luckyCount(10));
    printf("\n luckyCount(15): %d",luckyCount(15));
    printf("\n luckyCount(150): %d",luckyCount(150));
    
    
    printf("\n\n validNumber(2,10): %d",validNumber(2,10));
    printf("\n validNumber(10): %d",validNumber(10,4));
    printf("\n validNumber(15): %d",validNumber(15,4));
    printf("\n validNumber(150): %d",validNumber(150,4));
    
    
    
    
    
    
    
    
    
    printf("\n\n****************** [ E N D ] *******************\n\n");
    getch();
}    

