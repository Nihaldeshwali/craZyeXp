 Valgrind CookBook
 =================


******************************
Part 1: Introcution
******************************


What is Valgrind ?
------------------
- Valgrind is a multipurpose code profiling and memory debugging tool. Valgrind is called as a memory mismanagement detector.


Why to Use Valgrind?
-------------------
-allows you to run your program in Valgrind's own environment that monitors memory
- Inspect calls to malloc and free (or new and delete in C++).
- Inspect uninitialized memory, write off the end of an array, or forget to free a pointer,


what Valgrind can detect?
-------------------------
- Use of uninitialised memory
- Reading/writing memory after it has been free'd
- Reading/writing off the end of malloc'd blocks
- Reading/writing inappropriate areas on the stack
- Memory leaks -- where pointers to malloc'd blocks are lost forever
- Mismatched use of malloc/new/new [] vs free/delete/delete []
- Overlapping src and dst pointers in memcpy() and related functions
- Some misuses of the POSIX pthreads API


What is this tutorials all about?
---------------------------------
- Since above problem stated above are common problems, this tutorial will focus mainly on using Valgrind to find these types of simple memory problems
- though Valgrind is a tool that can do a lot more. 


Installation Valgrind
----------------------
- Ubuntu :  sudo apt-get install valgrind
- Fedora/Cent Os : sudo yum -y install valgrind.
- From Source code:
    bzip2 -d valgrind-XYZ.tar.bz2
    tar -xf valgrind-XYZ.tar
    ./configure
    make
    make install

*******************************
Explain with Example
*******************************

Let's See how we can use tool to solve memory realated issue.

1. Finding Memory Leaks With Valgrind ?
=======================================
PROGRAM : 
#include <stdlib.h>
int main()
{
    char *x = malloc(100); /* Here ew allocate some memory location but not freed.- Hece memory licks.*/
    return 0;
}
COMPILE: gcc -o test -g test.c 
RUN : % valgrind --tool=memcheck --leak-check=yes test
OUTPUT:
==2330== 100 bytes in 1 blocks are definitely lost in loss record 1 of 1
==2330==    at 0x1B900DD0: malloc (vg_replace_malloc.c:131)
==2330==    by 0x804840F: main (test.c:5)

Example 2: 
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv){
  int i;
  int *a;

  for (i=0; i < 10; i++){
    a = malloc(sizeof(int) * 100); 
  }
  free(a);
  return 0;
}
==24810== HEAP SUMMARY:
==24810==     in use at exit: 3,600 bytes in 9 blocks
==24810==   total heap usage: 10 allocs, 1 frees, 4,000 bytes allocated
==24810== 
==24810== 3,600 bytes in 9 blocks are definitely lost in loss record 1 of 1
==24810==    at 0x4A05E46: malloc (vg_replace_malloc.c:195)
==24810==    by 0x400525: main (example3.c:9)

2. Finding Invalid Pointer Use With Valgrind ?
==============================================
#include <stdlib.h>
int main()
{
    char *x = malloc(10);
    x[10] = 'a';  <<<<<<<<<<<<< We are aceessing memory out of what i have allocated.
    return 0;
}
valgrind --tool=memcheck --leak-check=yes test
==9814==  Invalid write of size 1
==9814==    at 0x804841E: main (test.c:6)
==9814==  Address 0x1BA3607A is 0 bytes after a block of size 10 alloc'd
==9814==    at 0x1B900DD0: malloc (vg_replace_malloc.c:131)
==9814==    by 0x804840F: main (test.c:5)
What this tell us:
- we're using a pointer allocated room for 10 bytes,
- but, we want to access 11th item , which is  outside that range -- consequently, we have an 'Invalid write'.
- If we were to try to read from that memory, we'd be alerted to an 'Invalid read of size X', 

Example 2:
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv){
  int i;
  int *a = malloc(sizeof(int) * 10);
  if (!a) return -1; /*malloc failed*/
  for (i = 0; i < 11; i++){
    a[i] = i;
  }
  free(a);
  return 0;
}
==23779== Invalid write of size 4
==23779==    at 0x400548: main (example1.c:9)
==23779==  Address 0x4c30068 is 0 bytes after a block of size 40 alloc'd
==23779==    at 0x4A05E46: malloc (vg_replace_malloc.c:195)
==23779==    by 0x40051C: main (example1.c:6)

3. Detecting The Use Of Uninitialized Variables?
================================================
#include <stdio.h>
int main()
{
    int x;  /* Here X is uninitialized */
    if(x == 0) /* Here we don't know the value of x */
    {
        printf("X is zero"); 
    }
    return 0;
}

Output :
==17943== Conditional jump or move depends on uninitialised value(s)
==17943==    at 0x804840A: main (example3.c:6)

Example 2:
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv){
  int i;
  int a[10];
  for (i = 0; i < 9; i++)
    a[i] = i;
    
  for (i = 0; i < 10; i++){
    printf("%d ", a[i]);
  }
  printf("\n");
  return 0;
}
==24599== Use of uninitialised value of size 8
==24599==    at 0x33A864484B: _itoa_word (in /lib64/libc-2.13.so)
==24599==    by 0x33A8646D50: vfprintf (in /lib64/libc-2.13.so)
==24599==    by 0x33A864FB59: printf (in /lib64/libc-2.13.so)
==24599==    by 0x400567: main (example2.c:11)

4.  Invalid free()  Example 
==============================
#include <stdlib.h>
int x;
int main()
{
  free(&x); <--x cannot be freeded as it is not allocated by malloc
  return 0;
}
==18731== Invalid free() / delete / delete[]
==18731==    at 0x4C240E8: free /tmp/vg/coregrind/m_replacemalloc/vg_replace_malloc.c:394
==18731==    by 0x4004AA: main /home/t.c:7
==18731==  Address 0x60089c is 0 bytes inside data symbol "x"

Example 2:
#include<stdio.h>

int main()
{
  char *name[2];
 name[0]="dinesh";
 name[1]="vignesh";
  printf("%s\n%s\n",name[0],name[1]);
  realloc(name,3);
  name[2]="vishwa";
  printf("%s\n",name[2]);
 return 0;
}
valgrind --tool=memcheck --leak-check=yes --show-reachable=yes a.out

==6402== Invalid free() / delete / delete[]
==6402==    at 0x4905E12: realloc (vg_replace_malloc.c:306)
==6402==    by 0x400539: main (in /user/gur29597/mysourcecode/VMake/a.out)
==6402==  Address 0x7FF000830 is on thread 1's stack

If ptr is a null pointer, the realloc function behaves like the malloc function for the speciﬁed size. Otherwise, ifptr does not match a pointer earlier returned by the calloc,malloc,or realloc function, or if the space has been deallocated by a call to the free or realloc function, the behavior is undeﬁned. If memory for the newobject cannot be allocated, the old object is not deallocated and its value is unchanged.


Example 3:


#include <stdlib.h>
int main()
{
        int *p, i;
        p = malloc(10*sizeof(int));
        for(i = 0;i < 10;i++)
                p[i] = i;
        free(p);
        free(p);        /* Error: p has already been freed */
        return 0;
}

5. Mismatched of Malloc and Free 
==================================
- If allocated with malloc, calloc, realloc, valloc or memalign, you must deallocate with free.
- If allocated with new[], you must deallocate with delete[].
- If allocated with new, you must deallocate with delete.


#include <stdlib.h>
int main()
{
        int *p, i;
        p = ( int* ) malloc(10*sizeof(int));
        for(i = 0;i < 10;i++)
                p[i] = i;
        delete(p);                /* Error: function mismatch */
        return 0;
}


==1066== ERROR SUMMARY: 1 errors from 1 contexts (suppressed:
0 from 0)
             ==1066== malloc/free: in use at exit: 0 bytes in 0 blocks.
             ==1066== malloc/free: 1 allocs, 1 frees, 40 bytes allocated.
             ==1066== For a detailed leak analysis,  rerun with:
--leak-check=yes
             ==1066== For counts of detected errors, rerun with: -v


6. Errors Occur Due to Invalid System Call Parameter
====================================================
- Here, buf = p contains the address of a 10 byte block. The read system call tries to read 100 bytes from standard input and place it at p. But the bytes after the first 10 are unaddressable.

#include <stdlib.h>
#include <unistd.h>
int main()
{
        int *p;
        p = malloc(10);
        read(0, p, 100);        /* Error: unaddressable bytes */
        free(p);
        return 0;
}


             ==1045== Syscall param read(buf) contains unaddressable
byte(s)
             ==1045==    at 0x4032AF44: __libc_read (in
/lib/i686/libc-2.2.2.so)
             ==1045==    by 0x4026D177: __libc_start_main
(../sysdeps/generic/libc-start.c:129)
             ==1045==    by 0x80483E1: read@@GLIBC_2.0 (in
/home/deepu/valg/a.out)
             
7. Deletect Memoty Overlap 
============================
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main()
{
    char * pOne;
    char * pTwo;

    pOne = (char *)malloc (24);
    pTwo = pOne + 4;
    strcpy (pOne, "Dipankar Dutta");
    printf("pOne = %s\npTwo = %s\n", pOne, pTwo);
    memcpy (pTwo, pOne, 16);//overlapping issue should be here
    printf("pOne = %s\npTwo = %s\n", pOne, pTwo);

    free (pOne);
    return 0;
}
 [sourav@titan temp]$ gcc -g -fno-builtin srvtest.c -o memory
 sourav@titan temp]$ valgrind --leak-check=full ./memory 
==19785== Memcheck, a memory error detector
==19785== Copyright (C) 2002-2009, and GNU GPL'd, by Julian Seward et al.
==19785== Using Valgrind-3.5.0 and LibVEX; rerun with -h for copyright info
==19785== Command: ./memory
==19785== 
pOne = Sourav Ghosh
pTwo = av Ghosh
==19785== Source and destination overlap in memcpy(0x402602c, 0x4026028, 16)
==19785==    at 0x4007AE2: memcpy (mc_replace_strmem.c:482)
==19785==    by 0x80484B3: main (srvtest.c:14)
==19785== 
pOne = SourSourav Ghosh
pTwo = Sourav Ghosh
==19785== 
==19785== HEAP SUMMARY:
==19785==     in use at exit: 0 bytes in 0 blocks
==19785==   total heap usage: 1 allocs, 1 frees, 24 bytes allocated
==19785== 
==19785== All heap blocks were freed -- no leaks are possible
==19785== 
==19785== For counts of detected and suppressed errors, rerun with: -v
==19785== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 12 from 8)

8. Syscall param write(buf) contains uninitialised or unaddressable byte(s)
===========================================================================
  #include <stdlib.h>
  #include <unistd.h>
  int main( void )
  {
    char* arr = malloc(10);
    (void) write( 1 /* stdout */, arr, 10 );
    return 0;
  }
You get this complaint ...

  Syscall param write(buf) contains uninitialised or unaddressable byte(s)
     at 0x4035E072: __libc_write
     by 0x402A6E5E: __libc_start_main (libc-start.c:129)
     by 0x80483B1: (within tests/badwrite)
     by <bogus frame pointer> ???
     Address 0x3807E6D0 is 0 bytes inside a block of size 10 alloc'd
     at 0x4004FEE6: malloc (ut_clientmalloc.c:539)
     by 0x80484A0: main (tests/badwrite.c:6)
     by 0x402A6E5E: __libc_start_main (libc-start.c:129)
     by 0x80483B1: (within tests/badwrite)
             


Limitations and Dependencies of Valgrind.
========================================

- No software is free from limitations. The same is the case of Valgrind, however most programs work fine. The limitations are listed below.
    Program runs 25 to 50 times slower.
    Increased memory consumption.
    Highly optimized code (compiled with -O1, -O2 options ) may sometimes cheat Valgrind.
    Valgrind relies on dynamic linking mechanism.



Reference :
===============

http://valgrind.org/docs/manual/manual.html



*********************************
Part 3: Q&A: Question to Ponder. 
*********************************

1.  what is the difference between:
definitely lost
indirectly lost
possibly lost
still reachable
and how can I try to fix them?

Ans: 
"definitely lost" means your program is leaking memory -- fix those leaks!

"indirectly lost" means your program is leaking memory in a pointer-based structure. (E.g. if the root node of a binary tree is "definitely lost", all the children will be "indirectly lost".) If you fix the "definitely lost" leaks, the "indirectly lost" leaks should go away.

"possibly lost" means your program is leaking memory, unless you're doing unusual things with pointers that could cause them to point into the middle of an allocated block; see the user manual for some possible causes. Use --show-possibly-lost=no if you don't want to see these reports.

"still reachable" means your program is probably ok -- it didn't free some memory it could have. This is quite common and often reasonable. Don't use --show-reachable=yes if you don't want to see these reports.

"suppressed" means that a leak error has been suppressed. There are some suppressions in the default suppression files. You can ignore suppressed errors.

Q2. What is the Error in the below program ?

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main()
{
    char* buf = malloc(3);
    strcpy(buf, "hi");
    printf("%s\n", buf);
    free(buf);
}

Q3. What is the Issue in the belwo Program ?


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main() {

  char *hello = "Hello World";
  char *hello2;

  printf("Step 1\n");
  printf("strlen : %lu\n",(unsigned long)strlen(hello));


  hello2 = calloc(12,sizeof(char));
  hello2[0] = 'H';
  hello2[1] = 'e';
  hello2[2] = 'l';
  hello2[3] = 'l';
  hello2[4] = 'o';
  hello2[5] = ' ';
  hello2[6] = 'W';
  hello2[7] = 'o';
  hello2[8] = 'r';
  hello2[9] = 'l';
  hello2[10] = 'd';
  hello2[11] = 0;  

  printf("Step 2\n");
  printf("strlen : %lu\n",(unsigned long)strlen(hello2));
  free(hello2);

  return 0;
}

Q4. What is the output the following program ?

#include <stdlib.h>

int main(int argc, char *argv[])
{
    unsigned *p = malloc(sizeof(unsigned));
    unsigned x = *p;
    free(p);
    unsigned f = x == 0;
    unsigned g = x == 1;
    return f & g;
}


Q5. What is the Issue in the follwoing program ?

#include <stdlib.h>
#include <stdio.h>
void main(){
  char *first="hello ";
  char *second="world!";
  char *seq=(char *)malloc((strlen(first)+1)*sizeof(char));
  strcat(strcpy(seq,first),second);
  printf("%s\n",seq);
  free(seq);
}

