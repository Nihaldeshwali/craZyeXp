10 gdb tricks you should know

Despite its age, gdb remains an amazingly versatile and flexible tool, and mastering it can save you huge amounts of time when trying to debug problems in your code. In this post, I'll share 10 tips and tricks for using GDB to debug most efficiently.

Let's start with the basic:

1. Different way to setting up break point 

a. Set a breakpoint at a function 
>>> (gdb) b lldp_encode
b. Set a breakpoint at a partiicular line of a file 
>>> (gdb) b lldp_tx.c:543
c. Set a breakpoint at a line number of sme file while execution: 
(gdb) b 566
d. Set  breakpoints in all function of a file: 
(gdb) rb lldp_tx.c:.
e. Set a breakpint when some condition met.
(gdb) b lldp_tx.c:895
(gdb) cond 1 lldp_if->onm_if->ifp->ifindex == 3 # where 1 is the breakpint id
(gdb) cond 1 # Make this break point unconditinal

OR
(gdb) b lldp_tx.c:895 if lldp_if->onm_if->ifp->ifindex == 3

f)List all break point 
(gdb)i b
g) delete break pint
(gdb) d 1 2 # delete breakpoint 1 and 2
(gdb) d # delete all break point

2. Change the code flow using gdb.

a) Run a program .
(gdb) r
b) Go to the next line
(gdb) n
c) Go into the function call
(gdb) s
d) Return from the function call
(gdb) fin
e)Continue the code flow upto next next breakpint
(gdb) c

f) see the code segment
(gdb)l

g) jump to the particular line, just like skip the code or like to redo the same work
(gdb) b <line no>
(gdb) c
OR
(gdb) jump <offset>

Skip 8 bytes ahead of the current program counter (instruction pointer).
(gdb) jump *$pc+8


3.  Print variable data in different way

a) print an integer
(gdb)p length
b) print information of a pointer to a structure
(gdb) p  p *lldp_if
$3 = {onm_if = 0x91bedd8, lldpm = 0x91b5b40, ..}
(gdb) p lldp_if->admin_status
c) print in hex
(gdb) p/x lldp_if->admin_status
$5 = 0x8
d) print in binary
(gdb) p/t lldp_if->admin_status
$6 = 1000
(gdb) 
e) Print Memory Words
(gdb) p &lldp_if->admin_status # get the address first
$7 = (u_int8_t *) 0x91c0898 "\b"
(gdb) x/1 0x91c0898
0x91c0898:	00000011111111110000000000001000 # Print the memory word
(gdb) 
f) Change the value at run time
(gdb) set lldp_if->admin_status = 15
(gdb) p lldp_if->admin_status
$8 = 15 '\017'
(gdb) x/1 0x91c0898
0x91c0898:	00000011111111110000000000001111
(gdb)
g)x/x displays elements in hex, x/d displays them as signed decimals, x/c displays characters, x/i disassembles memory as instructions, and x/s interprets memory as C strings.


h)
(gdb) info args
i)
(gdb) info locals

j) Display the variables argc and argv every time you stop.
(gdb) display argc
(gdb) display argv
4. Moving through out the Function call Stack ( Activation record)

a) Print full function call path
(gdb) bt
#0  lldp_encode (lldp_if=0x91bf878, length=0xbfd21bec) at lldp/lldp_tx.c:388
#1  0x080663d4 in lldp_tx (lldp_if=0x91bf878) at lldp/lldp_tx.c:1383
#2  0x08066518 in lldp_tx_timer_handler (t=0xbfd21c3c) at lldp/lldp_tx.c:1445
#3  0x0804a5b0 in onmd_start (deamon_mode=1, config_file=0x0, vty_port=2651, progname=0xbfd23830 "onmd") at onm_main.c:178
#4  0x0804a3d5 in main (argc=2, argv=0xbfd21d64) at ../../platform/linux/onm.c:158

b) print some local value of the caller function
(gdb) up
#1  0x080663d4 in lldp_tx (lldp_if=0x91bf878) at lldp/lldp_tx.c:1383
1383	      buf = lldp_encode (lldp_if, &length);
(gdb) p length
$9 = 0

c) print some local value of caller of caller of caller function
(gdb) up
#2  0x08066518 in lldp_tx_timer_handler (t=0xbfd21c3c) at lldp/lldp_tx.c:1445
1445	  lldp_tx (lldp_if);
(gdb) up
#3  0x0804a5b0 in onmd_start (deamon_mode=1, config_file=0x0, vty_port=2651, progname=0xbfd23830 "onmd") at onm_main.c:178
178	    thread_call (&thread);
(gdb) p thread
$10 = {next = 0x0, ...}

d) Come back to current function and print some local value
(gdb) down
#2  0x08066518 in lldp_tx_timer_handler (t=0xbfd21c3c) at lldp/lldp_tx.c:1445
1445	  lldp_tx (lldp_if);
(gdb) down
#1  0x080663d4 in lldp_tx (lldp_if=0x91bf878) at lldp/lldp_tx.c:1383
1383	      buf = lldp_encode (lldp_if, &length);
(gdb) down
#0  lldp_encode (lldp_if=0x91bf878, length=0xbfd21bec) at lldp/lldp_tx.c:388
388	{
(gdb)
e) We can Directly Move to a frame in call stack
(gdb) bt
#0  lldp_encode (lldp_if=0x91bf878, length=0xbfd21bec) at lldp/lldp_tx.c:388
#1  0x080663d4 in lldp_tx (lldp_if=0x91bf878) at lldp/lldp_tx.c:1383
#2  0x08066518 in lldp_tx_timer_handler (t=0xbfd21c3c) at lldp/lldp_tx.c:1445
#3  0x0804a5b0 in onmd_start (deamon_mode=1, config_file=0x0, vty_port=2651, progname=0xbfd23830 "onmd") at onm_main.c:178
#4  0x0804a3d5 in main (argc=2, argv=0xbfd21d64) at ../../platform/linux/onm.c:158
(gdb) f 4 # Directly go to 4th frame
#4  0x0804a3d5 in main (argc=2, argv=0xbfd21d64) at ../../platform/linux/onm.c:158
(gdb) 

5. Command to execute when ever you hit a break point.( It's kind of watch)

Breakpoint 1, lldp_encode (lldp_if=0x91c3708, length=0xbfd21bec) at lldp/lldp_tx.c:388
388	{
(gdb) command 1 # We specify list of command for break pint 1
Type commands for breakpoint(s) 1, one per line.
End with a line saying just "end".
>p *length
>p/x lldp_if->basic_tlvs_tx_enable
>p/x lldp_if->admin_status
>end
(gdb)c

Breakpoint 1, lldp_encode (lldp_if=0x91c11d8, length=0xbfd21bec) at lldp/lldp_tx.c:388  # Every time it will print
388	{
$14 = 0
$15 = 0x1ff
$16 = 0x8
(gdb) c
Continuing.

Breakpoint 1, lldp_encode (lldp_if=0x91bf878, length=0xbfd21bec) at lldp/lldp_tx.c:388
388	{
$17 = 0
$18 = 0x1ff
$19 = 0x8
(gdb)

6. Creating new variable/ gdb scripting 

(gdb) set $foo = 4
(gdb) p $foo
$24 = 4
(gdb) p *length
$25 = 0
(gdb) set $foo = 0
(gdb) p $foo == *length
$26 = 1
(gdb)

(gdb) print (int) printf ("Print nine: %d.", 4 + 5)
 
Or if you donâ€™t want to see void returns:
(gdb) call (int) printf ("Print nine: %d.", 4 + 5)

(gdb) set $foo = 5
(gdb) set variable $foo = 5
 
Or use the print command:
(gdb) print $foo = 5
 
Or use the call command:
(gdb) call $foo = 5
 
To specify the type of the variable:
(gdb) set $foo = (unsigned int) 5


Another Example:
(gdb) set $foo = "hello"
(gdb) set $foo1 ="Hello"
(gdb) p strcmp($foo,$foo1)
$27 = 1
(gdb) set $foo1 ="hello"
(gdb) p strcmp($foo,$foo1)
$28 = 0
(gdb) call strcmp($foo,$foo1) # to call a function , you can use call command 
$29 = 0
(gdb)


Another example of define a function inside gdb
(gdb) define xyz
Type commands for definition of "xyz".
End with a line saying just "end".
>echo helloWorld\n
>end
(gdb) xyz
helloWorld
(gdb) 


Another Small Prgram of adding variable :
(gdb) define add
Type commands for definition of "add".
End with a line saying just "end".
>if $argc == 2
 >print $arg0 + $arg1
 >end
>if $argc == 3
 >print $arg0 + $arg1 +$arg2
 >end
>end
(gdb) add 1 2
$30 = 3

7. Expanding Macro
Breakpoint 4, lldp_encode (lldp_if=0x91c2470, length=0xbfd21bec) at lldp/lldp_tx.c:457
457	  if (CHECK_FLAG (lldp_if->basic_tlvs_tx_enable, CHASSIS_ID_TLV_TX_ENABLE))
(gdb) p CHASSIS_ID_TLV_TX_ENABLE
No symbol "CHASSIS_ID_TLV_TX_ENABLE" in current context.
(gdb) 

# complile Again uisng -ggdb3 Flag
(gdb) p/x CHASSIS_ID_TLV_TX_ENABLE
(gdb)
(gdb) macro CHASSIS_ID_TLV_TX_ENABLE
#define CHASSIS_ID_TLV_TX_ENABLE 30

8. Finding source File.
I run on Bingo, so I can download binary from QA Server.and I can get source from CVS. But how do I tell gdb to put the two together? If the debug symbols include relative paths, I can use gdb's directory command to add the source directory to my source path:
(gdb) list main
1192    ls.c: No such file or directory.
    in ls.c
(gdb) directory ~/src/coreutils-7.4/src/
Source directories searched: /home/nelhage/src/coreutils-7.4:$cdir:$cwd
(gdb) list main

9. Dumping an Arry
int a[ 10 ] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

Then:
(gdb) p a
$1 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}

(gdb) p *&a[0]@10
$1 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
Of course, to view elements 550-553 in a long vector, all you do is 'p *&a[550]@4'.

10. Run UI for Debugging.
The gdb offers a way to do debugging using Text User Interface (TUI). It is a terminal interface which uses the curses library to show the source file, the assembly output, the program registers and gdb commands in separate text windows. 
We can start tui as 
gdb -tui attach 23334



******************** Extension ***********************
1.  Print the arry :
int main(){
   int *a;
   int b[3] = {1,2,3};
   a = b;

   int *c[3] = {a, b, 0};
   int **d = c;
   return 0;
 }
 (gdb) print b
 $4 = {1, 2, 3}
 (gdb) print a
 $5 = (int *) 0x7fffffffe0f0
 (gdb) print (int []) *a
 $7 = {1}
(gdb) print (int [3]) *a
 $8 = {1, 2, 3}












