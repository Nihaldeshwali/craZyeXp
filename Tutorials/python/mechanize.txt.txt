import mechanize
import cookielib
# Browser
br = mechanize.Browser()

# Cookie Jar
cj = cookielib.LWPCookieJar()
br.set_cookiejar(cj)

# Browser options
br.set_handle_equiv(True)
br.set_handle_gzip(True)
br.set_handle_redirect(True)
br.set_handle_referer(True)
br.set_handle_robots(False)

# Follows refresh 0 but not hangs on refresh > 0
br.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)

# Want debugging messages?
#br.set_debug_http(True)
#br.set_debug_redirects(True)
#br.set_debug_responses(True)

# User-Agent (this is cheating, ok?)
br.addheaders = [('User-agent', 'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.1) Gecko/2008071615 Fedora/3.0.1-1.fc9 Firefox/3.0.1')]





Cookie Save :
>>> from mechanize import Browser
>>> b = Browser()
>>> b._ua_handlers['_cookies'].cookiejar
mechanize._clientcookie.CookieJar[]
>>> b.open('http://google.com')
response_seek_wrapper at 0xb7a922ccL whose wrapped object = closeable_response at 0xb7aa070cL whose fp = socket._fileobject object at 0xb7a94224
>>>
>>> b._ua_handlers['_cookies'].cookiejar
mechanize._clientcookie.CookieJar[Cookie(version=0, name='PREF', value='ID=57d545c229b4cf3f:TM=1236081634:LM=1236081634:S=p001WJMOr-V8Rlvi', port=None, port_specified=False, domain='.google.com', domain_specified=True, domain_initial_dot=True, path='/', path_specified=True, secure=False, expires=1299153634, discard=False, comment=None, comment_url=None, rest={}, rfc2109=False), Cookie(version=0, name='PREF', value='ID=20534d80a5ccf2ea:TM=1236081635:LM=1236081635:S=jW3UotZ0dg8sv6mf', port=None, port_specified=False, domain='.google.com.ua', domain_specified=True, domain_initial_dot=True, path='/', path_specified=True, secure=False, expires=1299153635, discard=False, comment=None, comment_url=None, rest={}, rfc2109=False)]
>>>                           


Click Functinality
====================
> c:\users\dipankar.dutta\desktop\crazyexp\chatengine\160by2.py(145)do()
-> response = self.br.submit()
(Pdb) p self.br.click()
<mechanize._request.Request instance at 0x02C22AF8>
(Pdb) print self.br.click()
<Request for http://www.160by2.com/re-login>
(Pdb) print dir(self.br.click())
['_Request__original', '_Request__r_type', '__doc__', '__getattr__', '__init__',
 '__module__', '__str__', '_tunnel_host', 'add_data', 'add_header', 'add_unredir
ected_header', 'data', 'get_data', 'get_full_url', 'get_header', 'get_host', 'ge
t_method', 'get_origin_req_host', 'get_selector', 'get_type', 'has_data', 'has_h
eader', 'has_proxy', 'header_items', 'headers', 'host', 'is_unverifiable', 'orig
in_req_host', 'port', 'selector', 'set_proxy', 'timeout', 'type', 'unredirected_
hdrs', 'unverifiable', 'visit']
(Pdb) print self.br.click().__module__
mechanize._request
(Pdb) print self.br.click().__doc__
None
(Pdb) print self.br.click().data

(Pdb) print self.br.click().get_data
<bound method Request.get_data of <mechanize._request.Request instance at 0x02C2
2B70>>
(Pdb) print self.br.click().get_data()
(Pdb) print self.br.click().headers
{}
(Pdb) print self.br.click().headers_items
*** AttributeError: headers_items
(Pdb) print self.br.click().headers_items()
*** AttributeError: headers_items
(Pdb) print self.br.click().header_items
<bound method Request.header_items of <mechanize._request.Request instance at 0x
02C22AA8>>
(Pdb) print self.br.click().header_items()
[('Content-type', 'application/x-www-form-urlencoded'), ('Referer', 'http://www.
160by2.com/Index')]
(Pdb) print self.br.click().header_items()
[('Content-type', 'application/x-www-form-urlencoded'), ('Referer', 'http://www.
160by2.com/Index')]
(Pdb) print self.br.click().get_type()
http
(Pdb) print self.br.click().get_host()
www.160by2.com
(Pdb) print self.br.click().get_method()
POST
(Pdb) print self.br.click().get_origin_request_host()
*** AttributeError: get_origin_request_host
(Pdb) print self.br.click().get_origin_req_host()
www.160by2.com
(Pdb) print self.br.click().get_selector()
/re-login
(Pdb) print self.br.click().has_data('username')
*** TypeError: has_data() takes exactly 1 argument (2 given)
(Pdb) print self.br.click().has_data()
True
(Pdb) print self.br.click().has_header()
*** TypeError: has_header() takes exactly 2 arguments (1 given)
(Pdb) print self.br.click().has_header(''Referer')
*** SyntaxError: invalid syntax (<stdin>, line 1)
(Pdb) print self.br.click().has_header('Referer')
True
(Pdb) print self.br.click().has_header('Referer1')
False
(Pdb) print self.br.click().has_proxy()
False
(Pdb) print self.br.click().header_items()
[('Content-type', 'application/x-www-form-urlencoded'), ('Referer', 'http://www.
160by2.com/Index')]
(Pdb) print self.br.click().headers()
*** TypeError: 'dict' object is not callable
(Pdb) print self.br.click().headers
{}
(Pdb) print self.br.click().host
None
(Pdb) print self.br.click().timeout
<object object at 0x004A14C8>
(Pdb) print self.br.click().timeout()
*** TypeError: 'object' object is not callable
(Pdb) print dir(self.br.click().timeout)
['__class__', '__delattr__', '__doc__', '__format__', '__getattribute__', '__has
h__', '__init__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setat
tr__', '__sizeof__', '__str__', '__subclasshook__']
(Pdb) print dir(self.br.click().type
*** SyntaxError: unexpected EOF while parsing (<stdin>, line 1)
(Pdb) print self.br.click().type
http
(Pdb) print self.br.click().visit
None
(Pdb)

====================================
(Pdb) dir(self.br)
['BLOCK_SIZE', '__doc__', '__getattr__', '__init__', '__module__', '__str__', '_
add_referer_header', '_any_request', '_any_response', '_call_chain', '_client_ce
rt_manager', '_factory', '_filter_links', '_handle_referer', '_handler_index_val
id', '_history', '_maybe_reindex_handlers', '_mech_open', '_open', '_password_ma
nager', '_proxy_password_manager', '_replace_handler', '_request', '_response',
'_set_handler', '_set_response', '_tempfiles', '_ua_handlers', '_visit_request',
 'add_client_certificate', 'add_handler', 'add_password', 'add_proxy_password',
'addheaders', 'back', 'clear_history', 'click', 'click_link', 'close', 'default_
features', 'default_others', 'default_schemes', 'encoding', 'error', 'find_link'
, 'follow_link', 'form', 'forms', 'geturl', 'global_form', 'handle_error', 'hand
le_open', 'handler_classes', 'handlers', 'links', 'open', 'open_local_file', 'op
en_novisit', 'process_request', 'process_response', 'reload', 'request', 'reques
t_class', 'response', 'retrieve', 'select_form', 'set_client_cert_manager', 'set
_cookie', 'set_cookiejar', 'set_debug_http', 'set_debug_redirects', 'set_debug_r
esponses', 'set_handle_equiv', 'set_handle_gzip', 'set_handle_redirect', 'set_ha
ndle_referer', 'set_handle_refresh', 'set_handle_robots', 'set_handled_schemes',
 'set_password_manager', 'set_proxies', 'set_proxy_password_manager', 'set_respo
nse', 'submit', 'title', 'viewing_html', 'visit_response']
(Pdb)

====================================
import mechanize
import urllib2

MechBrowser = mechanize.Browser()
LoginUrl = "http://example.com/login.html"
LoginData = "username=shane&password=123456&do=login"
LoginHeader = {"User-Agent": "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2.8) Gecko/20100722 Firefox/3.6.8 GTB7.1 (.NET CLR 3.5.30729)", "Referer": "http://example.com"}

LoginRequest = urllib2.Request(LoginUrl, LoginData, LoginHeader)
LoginResponse = MechBrowser.open(LoginRequest)
