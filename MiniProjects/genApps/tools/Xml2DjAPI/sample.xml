<!--
Tutorials
=========
name - attribute indicates- name of the fuild in the table
type -attribute indicates - Type of data to be stoied
properties -> proerties used to crete the model
user_input="yes" -> indicate we need to pass this input from API , will not generate automaticaly
default="something" -> indicate the data to be store if API pass as null, wil be inputted by API default parameter
stub="true"

Feature Logs
============================================================
- Adding Support for M2M/O2O and FRN relationship. Now You have a API and Revese API to alternet Relationship( Primary testing is Done)

- entry log History
- creted at & updaed at
- String serach with contains.
-Introducting common.py / which just dump some common helper function used by everyone.
- Advance serach
- serachble List Item Append Remove

TODO:
- Quick Serach (while type )

- Log_Histriry excludes from query
- Common.py 

Next Big Ideas
=============================================================
DELETE DOESNT SUPPORT Passing perameters
sorting on tags doent solve the serach : [1,10] ==>[1,2,3,5,10] not works- BEST A JOIN OPS,

Topology
========================================
The sample.xml contains the database topology, which cober most of the test senarions which is supported by this apps.

The Rule is as below.

1. We have 3 table as below:
   Author(id,name,reg,date,life,tag1,tag2) . Life id unstructured data as a directory,.
   Publication(id,name,accid)
   Book(name,authors,publications)
   TOC(name)
2. Relationship is as below:
   - A book can have multiple author ( Book <-ManyToManyField ->Author )
   - A book must be belongs to a publication ( Book == Frnkey to Publication )
   - A book have a TOC( one2 one relationship)

Sample Query and TestCase :
a) Entity Related
  Test ID           : Desc
  =============================
  -Entity/Author    : create three Author with empty/populated/ wrong field.
  -Entity/Author    : get all and verify 3 author informations
  -Entity/Author    : update the author informations 
  -Entity/Author    : add tag to  Author 
  -Entity/Author    : delete tag to  Author 
  -Entity/Author    : Search Author having reg and name  
  -Entity/Author    : Show Author having name startswith/endwith something 
  -Entity/Author    : verify AND ops with adv serach
  -Entity/Author    : verify OR ops with adv seracgh 
  -Entity/Author    : varify tag serach with tagin clause
  -Entity/Author    : varify OrderBy caluse
  -Entity/Author    : varify include caluse
  -Entity/Author    : view log_history of a table
  -Entity/Author    : Varify creted and update ts of a author.
 =================================== 
b) Relationship related 

I. One to One Relationship
============================
a) this case two objcets are one to one related, one can access another and revrese way
c) Both model have a option to add/del/get the one-to-one related objcet.
c) they cannot be attach while creation/update that object (even if it is possible -not supported as per now) 



II. Many to many relationship.
=================================

  Test ID           : Desc
  ==========================
  -M2M/Book         : add author - varify authors/varify book for author - delete author - varify authors/varify book for author
  -M2M/Author       : add book - varify authors/varify book for author - delete book - varify authors/varify book for author
  -FRN/Book         : add pub/delete pub(error)/check pub
  -FRN/Publication  : add book/delete book/check book list
=================
c) foreignkey Related Query
 A Book MUST  be belongs to ONE Publicaation
  
  
Notes:
==============================================
1. add <allow_user_input="no"> if ur API donot take it.

-->

<model_list> <!-- The main container-->
    <model name="Author"> <!-- indicate each models -->
        <field_list> <!-- indicate list of fields in a models -->
            <field name="name" type="CharField" properties="max_length=100,null=True" default="'hari'">None</field> <!-- This is a field with name "name" type 'Charfiled' and properties -->
            <field name="date" type="DateTimeField" properties="auto_now=True,default=datetime.now()" allow_user_input="no" >None</field>
            <field name="life" type="DictField" properties="null=True,blank=True"  default="{'house_rent':0,'food':0,'traval':0}">None</field>
            <field name="mych" type="ListField" properties="null=True,blank=True" choices="type1,type2,type3" default="['type1']">None</field>
        </field_list>
        <addon_list>
          <addon name="min_view" onField="name"/>  <!-- <<MUST>> We must have this addon -->
        </addon_list>        
    </model>
    <model name="Publication">
        <field_list>
            <field name="name" type="CharField" properties="max_length=100,null=False" >None</field>
            <field name="accid" type="IntegerField" properties="default=None,null=True,blank=True" >None</field>
        </field_list>
        <addon_list>
          <addon name="min_view" onField="name"/>  <!-- <<MUST>> We must have this addon -->
        </addon_list>
    </model>
    <model name="TOC">
        <field_list>
            <field name="name" type="CharField" properties="max_length=100,null=False">None</field>
        </field_list>
        <addon_list>
          <addon name="min_view" onField="name"/>  <!-- <<MUST>> We must have this addon -->
        </addon_list>
    </model>

    <model name="Book">
        <field_list>
            <field name="name" type="CharField" properties="max_length=100,null=False">None</field>
            <field name="authors" type="ManyToManyField" properties="to=Author" allow_user_input="no" ref="Author">None</field>
            <field name="reg" type="IntegerField" properties="default=None,null=True,blank=True" >None</field>
            <field name="publication" type="ForeignKey" properties="to=Publication" ref="Publication" >NONE</field>
            <field name="toc" type="OneToOneField" properties="to=TOC,null=True,blank=True" ref="TOC" >NONE</field>
            <field name="tag1" type="ListField" properties="default=[1,2,3],null=True,blank=True" >None</field>
            <field name="tag2" type="ListField" properties="default=[1,2,3],null=True,blank=True" >None</field>
            <field name="mych" type="ListField" properties="default=[1,2,3],null=True,blank=True" choices="type1,type2,type3">None</field>
            <field name="mych2" type="ListField" properties="default=[1,2,3],null=True,blank=True" choices="type1,type2,type3">None</field>
        </field_list>
        <addon_list>
           <addon name="advance_serach" /> <!-- Adding this will enable Advance serach on this model -->
           <addon name="log_history"/> <!-- Adding this will track history of each row -->
           <addon name="track_update"/>  <!-- Adding this will track crete and last update of each row -->
           <addon name="tag_ops" onField="tag1 tag2"/>  <!-- Adding this will enable append/remove/search on tags. -->
           <addon name="min_view" onField="name reg"/>  <!-- <<MUST>> : Adding this tags, will enable et only id and name. -->           
        </addon_list>   
    </model>
    
    <!-- We have Global Addon here .. -->
    <addon_list>
       <addon name="advance_serach" /> <!-- Adding this will enable Advance serach on this model -->
       <addon name="min_view" onField="name"/>  <!-- <<MUST>> : Adding this tags, will enable et only id and name. -->
       <addon name="quick_search" onField="name" filter="startswith"/>  <!--  Enable you to do Quick Serach having data "start with name" -->
    </addon_list> 
</model_list>



<!--
Automation.config
GET  /api/Author/ {header} {data} "GrepinOutput"
-->