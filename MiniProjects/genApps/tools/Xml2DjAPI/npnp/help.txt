
  1. Parent Func specifications
  ====================================
  1.1 Brief Description

  1.2 REST End point API specifications
     i) Creating a new Parent
         HTTP: POST /api/Parent/
         DATA: name=name,email=email,phone=phone,occupation=occupation,address=address,income=income,relationship=relationship,secondary_contact=secondary_contact,

    ii) Update a exiting Parent info
         HTTP: POST /api/Parent/1/
         DATA: name=name,email=email,phone=phone,occupation=occupation,address=address,income=income,relationship=relationship,secondary_contact=secondary_contact,

   iii) Getting an Parent info
         HTTP: GET /api/Parent/1/

    iv) Getting All Parent info
         HTTP: GET /api/Parent/
         DATA: name=name,email=email,phone=phone,occupation=occupation,address=address,income=income,relationship=relationship,secondary_contact=secondary_contact,

     v) search  All Parent info
         HTTP: GET /api/Parent/
         DATA: name=name,email=email,phone=phone,occupation=occupation,address=address,income=income,relationship=relationship,secondary_contact=secondary_contact,

    vi) Search using pagination of Parent data
         HTTP: GET /api/Parent/
         DATA: name=name,email=email,phone=phone,occupation=occupation,address=address,income=income,relationship=relationship,secondary_contact=secondary_contact,

  

    List of APIs to maintain relationship with other model
    =======================================================
    ( note that for O2O and Frn Key can be done through update Method )


     i) Getting all Student for a Parent
         HTTP: GET /api/Parent/1/Student/

    ii) Adding more Student for a Parent
         HTTP: POST /api/Parent/1/Student/
         DATA: action=ADD&student=[1,2,3]

    iii) Removing more Student for a Parent
         HTTP: POST /api/Parent/1/Student/
         DATA: action=DEL&student=[1,2,3]



    x) Advance Search Example 
         HTTP: POST : http://192.168.56.101:7777/api/Author/aq/
         DATA : name=dipankar12322333&reg=1&tag1=%5B3%2C4%5D&action=APPEND
         orderBy=reg%2Cname&include=name%2Creg&name=%3Astartswith%3Aa
      1) Filter Data by startswith, endswith , exact, iexact etc.
          DATA format => and:startswith:abc OR <or:endswith:abc> like this
      2) Performing odrer by
         example  Data => oredrBy=name,reg 
      3) Only includes some colus
      Example1: find all item but show only name and reg column ? <include=name,reg> : OK
      4) Tag Serach :
      Example1: find all item having tag a and b and c ? Ans : <and:tagin:a,b,c> OK
      Example2: Find all item having tag a and b but not tag c ? Ans :  <and:tagin:a,b,-c> OK
      Example3: Find All item having tag a and b or tag c and d? Ans :  <and:tagin:a,b> <or:tagin:c,d> = OK
      Example4: Find All item doesn't have tag a ?                Ans  : <and:tagin:-a> OK




    xi) Min View 
    ===================
    Get Some Data Not all data from the table
    - It's Useful if yiu have lot of column in Parent table.
         HTTP: GET : http://192.168.56.101:7777/api/Author/mv/
         DATA : page=10&limit=2


  2. Employee Func specifications
  ====================================
  2.1 Brief Description

  2.2 REST End point API specifications
     i) Creating a new Employee
         HTTP: POST /api/Employee/
         DATA: name=name,uid=uid,address=address,age=age,designation=designation,rank=rank,max_qualification=max_qualification,meretarial_status=meretarial_status,gender=gender,dob=dob,doj=doj,categories=categories,

    ii) Update a exiting Employee info
         HTTP: POST /api/Employee/1/
         DATA: name=name,uid=uid,address=address,age=age,designation=designation,rank=rank,max_qualification=max_qualification,meretarial_status=meretarial_status,gender=gender,dob=dob,doj=doj,categories=categories,

   iii) Getting an Employee info
         HTTP: GET /api/Employee/1/

    iv) Getting All Employee info
         HTTP: GET /api/Employee/
         DATA: name=name,uid=uid,address=address,age=age,designation=designation,rank=rank,max_qualification=max_qualification,meretarial_status=meretarial_status,gender=gender,dob=dob,doj=doj,categories=categories,

     v) search  All Employee info
         HTTP: GET /api/Employee/
         DATA: name=name,uid=uid,address=address,age=age,designation=designation,rank=rank,max_qualification=max_qualification,meretarial_status=meretarial_status,gender=gender,dob=dob,doj=doj,categories=categories,

    vi) Search using pagination of Employee data
         HTTP: GET /api/Employee/
         DATA: name=name,uid=uid,address=address,age=age,designation=designation,rank=rank,max_qualification=max_qualification,meretarial_status=meretarial_status,gender=gender,dob=dob,doj=doj,categories=categories,

  

    List of APIs to maintain relationship with other model
    =======================================================
    ( note that for O2O and Frn Key can be done through update Method )


     i) Getting all Subject for a Employee
         HTTP: GET /api/Employee/1/Subject/

    ii) Adding more Subject for a Employee
         HTTP: POST /api/Employee/1/Subject/
         DATA: action=ADD&subject=[1,2,3]

    iii) Removing more Subject for a Employee
         HTTP: POST /api/Employee/1/Subject/
         DATA: action=DEL&subject=[1,2,3]



     i) Getting all MyClass for a Employee
         HTTP: GET /api/Employee/1/MyClass/

    ii) Adding more MyClass for a Employee
         HTTP: POST /api/Employee/1/MyClass/
         DATA: action=ADD&myclass=[1,2,3]

    iii) Removing more MyClass for a Employee
         HTTP: POST /api/Employee/1/MyClass/
         DATA: action=DEL&myclass=[1,2,3]



     i) Getting all Exam for a Employee
         HTTP: GET /api/Employee/1/Exam/

    ii) Adding more Exam for a Employee
         HTTP: POST /api/Employee/1/Exam/
         DATA: action=ADD&exam=[1,2,3]

    iii) Removing more Exam for a Employee
         HTTP: POST /api/Employee/1/Exam/
         DATA: action=DEL&exam=[1,2,3]



    x) Advance Search Example 
         HTTP: POST : http://192.168.56.101:7777/api/Author/aq/
         DATA : name=dipankar12322333&reg=1&tag1=%5B3%2C4%5D&action=APPEND
         orderBy=reg%2Cname&include=name%2Creg&name=%3Astartswith%3Aa
      1) Filter Data by startswith, endswith , exact, iexact etc.
          DATA format => and:startswith:abc OR <or:endswith:abc> like this
      2) Performing odrer by
         example  Data => oredrBy=name,reg 
      3) Only includes some colus
      Example1: find all item but show only name and reg column ? <include=name,reg> : OK
      4) Tag Serach :
      Example1: find all item having tag a and b and c ? Ans : <and:tagin:a,b,c> OK
      Example2: Find all item having tag a and b but not tag c ? Ans :  <and:tagin:a,b,-c> OK
      Example3: Find All item having tag a and b or tag c and d? Ans :  <and:tagin:a,b> <or:tagin:c,d> = OK
      Example4: Find All item doesn't have tag a ?                Ans  : <and:tagin:-a> OK




    xi) Min View 
    ===================
    Get Some Data Not all data from the table
    - It's Useful if yiu have lot of column in Employee table.
         HTTP: GET : http://192.168.56.101:7777/api/Author/mv/
         DATA : page=10&limit=2


  3. Subject Func specifications
  ====================================
  3.1 Brief Description

  3.2 REST End point API specifications
     i) Creating a new Subject
         HTTP: POST /api/Subject/
         DATA: name=name,uid=uid,syllabus=syllabus,ref_book=ref_book,teacher=teacher,categorise=categorise,group=group,mark_division=mark_division,

    ii) Update a exiting Subject info
         HTTP: POST /api/Subject/1/
         DATA: name=name,uid=uid,syllabus=syllabus,ref_book=ref_book,teacher=teacher,categorise=categorise,group=group,mark_division=mark_division,

   iii) Getting an Subject info
         HTTP: GET /api/Subject/1/

    iv) Getting All Subject info
         HTTP: GET /api/Subject/
         DATA: name=name,uid=uid,syllabus=syllabus,ref_book=ref_book,teacher=teacher,categorise=categorise,group=group,mark_division=mark_division,

     v) search  All Subject info
         HTTP: GET /api/Subject/
         DATA: name=name,uid=uid,syllabus=syllabus,ref_book=ref_book,teacher=teacher,categorise=categorise,group=group,mark_division=mark_division,

    vi) Search using pagination of Subject data
         HTTP: GET /api/Subject/
         DATA: name=name,uid=uid,syllabus=syllabus,ref_book=ref_book,teacher=teacher,categorise=categorise,group=group,mark_division=mark_division,

  

    List of APIs to maintain relationship with other model
    =======================================================
    ( note that for O2O and Frn Key can be done through update Method )


     i) Getting all Employee for a Subject
         HTTP: GET /api/Subject/1/Employee/

    ii) Adding more Employee for a Subject
         HTTP: POST /api/Subject/1/Employee/
         DATA: action=ADD&teacher=[1,2,3]

    iii) Removing more Employee for a Subject
         HTTP: POST /api/Subject/1/Employee/
         DATA: action=DEL&teacher=[1,2,3]



     i) Getting all MyClass for a Subject
         HTTP: GET /api/Subject/1/MyClass/

    ii) Adding more MyClass for a Subject
         HTTP: POST /api/Subject/1/MyClass/
         DATA: action=ADD&myclass=[1,2,3]

    iii) Removing more MyClass for a Subject
         HTTP: POST /api/Subject/1/MyClass/
         DATA: action=DEL&myclass=[1,2,3]



     i) Getting all Exam for a Subject
         HTTP: GET /api/Subject/1/Exam/

    ii) Adding more Exam for a Subject
         HTTP: POST /api/Subject/1/Exam/
         DATA: action=ADD&exam=[1,2,3]

    iii) Removing more Exam for a Subject
         HTTP: POST /api/Subject/1/Exam/
         DATA: action=DEL&exam=[1,2,3]



     i) Getting all Mark for a Subject
         HTTP: GET /api/Subject/1/Mark/

    ii) Adding more Mark for a Subject
         HTTP: POST /api/Subject/1/Mark/
         DATA: action=ADD&mark=[1,2,3]

    iii) Removing more Mark for a Subject
         HTTP: POST /api/Subject/1/Mark/
         DATA: action=DEL&mark=[1,2,3]



    x) Advance Search Example 
         HTTP: POST : http://192.168.56.101:7777/api/Author/aq/
         DATA : name=dipankar12322333&reg=1&tag1=%5B3%2C4%5D&action=APPEND
         orderBy=reg%2Cname&include=name%2Creg&name=%3Astartswith%3Aa
      1) Filter Data by startswith, endswith , exact, iexact etc.
          DATA format => and:startswith:abc OR <or:endswith:abc> like this
      2) Performing odrer by
         example  Data => oredrBy=name,reg 
      3) Only includes some colus
      Example1: find all item but show only name and reg column ? <include=name,reg> : OK
      4) Tag Serach :
      Example1: find all item having tag a and b and c ? Ans : <and:tagin:a,b,c> OK
      Example2: Find all item having tag a and b but not tag c ? Ans :  <and:tagin:a,b,-c> OK
      Example3: Find All item having tag a and b or tag c and d? Ans :  <and:tagin:a,b> <or:tagin:c,d> = OK
      Example4: Find All item doesn't have tag a ?                Ans  : <and:tagin:-a> OK




    xi) Min View 
    ===================
    Get Some Data Not all data from the table
    - It's Useful if yiu have lot of column in Subject table.
         HTTP: GET : http://192.168.56.101:7777/api/Author/mv/
         DATA : page=10&limit=2


  4. MyClass Func specifications
  ====================================
  4.1 Brief Description

  4.2 REST End point API specifications
     i) Creating a new MyClass
         HTTP: POST /api/MyClass/
         DATA: name=name,room=room,class_teacher=class_teacher,subjects=subjects,

    ii) Update a exiting MyClass info
         HTTP: POST /api/MyClass/1/
         DATA: name=name,room=room,class_teacher=class_teacher,subjects=subjects,

   iii) Getting an MyClass info
         HTTP: GET /api/MyClass/1/

    iv) Getting All MyClass info
         HTTP: GET /api/MyClass/
         DATA: name=name,room=room,class_teacher=class_teacher,subjects=subjects,

     v) search  All MyClass info
         HTTP: GET /api/MyClass/
         DATA: name=name,room=room,class_teacher=class_teacher,subjects=subjects,

    vi) Search using pagination of MyClass data
         HTTP: GET /api/MyClass/
         DATA: name=name,room=room,class_teacher=class_teacher,subjects=subjects,

  

    List of APIs to maintain relationship with other model
    =======================================================
    ( note that for O2O and Frn Key can be done through update Method )


     i) Getting all Employee for a MyClass
         HTTP: GET /api/MyClass/1/Employee/

    ii) Adding more Employee for a MyClass
         HTTP: POST /api/MyClass/1/Employee/
         DATA: action=ADD&class_teacher=[1,2,3]

    iii) Removing more Employee for a MyClass
         HTTP: POST /api/MyClass/1/Employee/
         DATA: action=DEL&class_teacher=[1,2,3]



     i) Getting all Subject for a MyClass
         HTTP: GET /api/MyClass/1/Subject/

    ii) Adding more Subject for a MyClass
         HTTP: POST /api/MyClass/1/Subject/
         DATA: action=ADD&subjects=[1,2,3]

    iii) Removing more Subject for a MyClass
         HTTP: POST /api/MyClass/1/Subject/
         DATA: action=DEL&subjects=[1,2,3]



     i) Getting all Student for a MyClass
         HTTP: GET /api/MyClass/1/Student/

    ii) Adding more Student for a MyClass
         HTTP: POST /api/MyClass/1/Student/
         DATA: action=ADD&student=[1,2,3]

    iii) Removing more Student for a MyClass
         HTTP: POST /api/MyClass/1/Student/
         DATA: action=DEL&student=[1,2,3]



     i) Getting all Attendance for a MyClass
         HTTP: GET /api/MyClass/1/Attendance/

    ii) Adding more Attendance for a MyClass
         HTTP: POST /api/MyClass/1/Attendance/
         DATA: action=ADD&attendance=[1,2,3]

    iii) Removing more Attendance for a MyClass
         HTTP: POST /api/MyClass/1/Attendance/
         DATA: action=DEL&attendance=[1,2,3]



    x) Advance Search Example 
         HTTP: POST : http://192.168.56.101:7777/api/Author/aq/
         DATA : name=dipankar12322333&reg=1&tag1=%5B3%2C4%5D&action=APPEND
         orderBy=reg%2Cname&include=name%2Creg&name=%3Astartswith%3Aa
      1) Filter Data by startswith, endswith , exact, iexact etc.
          DATA format => and:startswith:abc OR <or:endswith:abc> like this
      2) Performing odrer by
         example  Data => oredrBy=name,reg 
      3) Only includes some colus
      Example1: find all item but show only name and reg column ? <include=name,reg> : OK
      4) Tag Serach :
      Example1: find all item having tag a and b and c ? Ans : <and:tagin:a,b,c> OK
      Example2: Find all item having tag a and b but not tag c ? Ans :  <and:tagin:a,b,-c> OK
      Example3: Find All item having tag a and b or tag c and d? Ans :  <and:tagin:a,b> <or:tagin:c,d> = OK
      Example4: Find All item doesn't have tag a ?                Ans  : <and:tagin:-a> OK




    xi) Min View 
    ===================
    Get Some Data Not all data from the table
    - It's Useful if yiu have lot of column in MyClass table.
         HTTP: GET : http://192.168.56.101:7777/api/Author/mv/
         DATA : page=10&limit=2


  5. Exam Func specifications
  ====================================
  5.1 Brief Description

  5.2 REST End point API specifications
     i) Creating a new Exam
         HTTP: POST /api/Exam/
         DATA: name=name,subject=subject,classRoom=classRoom,time=time,teacher=teacher,

    ii) Update a exiting Exam info
         HTTP: POST /api/Exam/1/
         DATA: name=name,subject=subject,classRoom=classRoom,time=time,teacher=teacher,

   iii) Getting an Exam info
         HTTP: GET /api/Exam/1/

    iv) Getting All Exam info
         HTTP: GET /api/Exam/
         DATA: name=name,subject=subject,classRoom=classRoom,time=time,teacher=teacher,

     v) search  All Exam info
         HTTP: GET /api/Exam/
         DATA: name=name,subject=subject,classRoom=classRoom,time=time,teacher=teacher,

    vi) Search using pagination of Exam data
         HTTP: GET /api/Exam/
         DATA: name=name,subject=subject,classRoom=classRoom,time=time,teacher=teacher,

  

    List of APIs to maintain relationship with other model
    =======================================================
    ( note that for O2O and Frn Key can be done through update Method )


     i) Getting all Subject for a Exam
         HTTP: GET /api/Exam/1/Subject/

    ii) Adding more Subject for a Exam
         HTTP: POST /api/Exam/1/Subject/
         DATA: action=ADD&subject=[1,2,3]

    iii) Removing more Subject for a Exam
         HTTP: POST /api/Exam/1/Subject/
         DATA: action=DEL&subject=[1,2,3]



     i) Getting all Employee for a Exam
         HTTP: GET /api/Exam/1/Employee/

    ii) Adding more Employee for a Exam
         HTTP: POST /api/Exam/1/Employee/
         DATA: action=ADD&teacher=[1,2,3]

    iii) Removing more Employee for a Exam
         HTTP: POST /api/Exam/1/Employee/
         DATA: action=DEL&teacher=[1,2,3]



     i) Getting all Mark for a Exam
         HTTP: GET /api/Exam/1/Mark/

    ii) Adding more Mark for a Exam
         HTTP: POST /api/Exam/1/Mark/
         DATA: action=ADD&mark=[1,2,3]

    iii) Removing more Mark for a Exam
         HTTP: POST /api/Exam/1/Mark/
         DATA: action=DEL&mark=[1,2,3]



     i) Getting all Result for a Exam
         HTTP: GET /api/Exam/1/Result/

    ii) Adding more Result for a Exam
         HTTP: POST /api/Exam/1/Result/
         DATA: action=ADD&result=[1,2,3]

    iii) Removing more Result for a Exam
         HTTP: POST /api/Exam/1/Result/
         DATA: action=DEL&result=[1,2,3]



    x) Advance Search Example 
         HTTP: POST : http://192.168.56.101:7777/api/Author/aq/
         DATA : name=dipankar12322333&reg=1&tag1=%5B3%2C4%5D&action=APPEND
         orderBy=reg%2Cname&include=name%2Creg&name=%3Astartswith%3Aa
      1) Filter Data by startswith, endswith , exact, iexact etc.
          DATA format => and:startswith:abc OR <or:endswith:abc> like this
      2) Performing odrer by
         example  Data => oredrBy=name,reg 
      3) Only includes some colus
      Example1: find all item but show only name and reg column ? <include=name,reg> : OK
      4) Tag Serach :
      Example1: find all item having tag a and b and c ? Ans : <and:tagin:a,b,c> OK
      Example2: Find all item having tag a and b but not tag c ? Ans :  <and:tagin:a,b,-c> OK
      Example3: Find All item having tag a and b or tag c and d? Ans :  <and:tagin:a,b> <or:tagin:c,d> = OK
      Example4: Find All item doesn't have tag a ?                Ans  : <and:tagin:-a> OK




    xi) Min View 
    ===================
    Get Some Data Not all data from the table
    - It's Useful if yiu have lot of column in Exam table.
         HTTP: GET : http://192.168.56.101:7777/api/Author/mv/
         DATA : page=10&limit=2


  6. Student Func specifications
  ====================================
  6.1 Brief Description

  6.2 REST End point API specifications
     i) Creating a new Student
         HTTP: POST /api/Student/
         DATA: name=name,email=email,phone=phone,address=address,dob=dob,doj=doj,gender=gender,parent=parent,roll=roll,section=section,

    ii) Update a exiting Student info
         HTTP: POST /api/Student/1/
         DATA: name=name,email=email,phone=phone,address=address,dob=dob,doj=doj,gender=gender,parent=parent,roll=roll,section=section,

   iii) Getting an Student info
         HTTP: GET /api/Student/1/

    iv) Getting All Student info
         HTTP: GET /api/Student/
         DATA: name=name,email=email,phone=phone,address=address,dob=dob,doj=doj,gender=gender,parent=parent,roll=roll,section=section,

     v) search  All Student info
         HTTP: GET /api/Student/
         DATA: name=name,email=email,phone=phone,address=address,dob=dob,doj=doj,gender=gender,parent=parent,roll=roll,section=section,

    vi) Search using pagination of Student data
         HTTP: GET /api/Student/
         DATA: name=name,email=email,phone=phone,address=address,dob=dob,doj=doj,gender=gender,parent=parent,roll=roll,section=section,

  

    List of APIs to maintain relationship with other model
    =======================================================
    ( note that for O2O and Frn Key can be done through update Method )


     i) Getting all Parent for a Student
         HTTP: GET /api/Student/1/Parent/

    ii) Adding more Parent for a Student
         HTTP: POST /api/Student/1/Parent/
         DATA: action=ADD&parent=[1,2,3]

    iii) Removing more Parent for a Student
         HTTP: POST /api/Student/1/Parent/
         DATA: action=DEL&parent=[1,2,3]



     i) Getting all MyClass for a Student
         HTTP: GET /api/Student/1/MyClass/

    ii) Adding more MyClass for a Student
         HTTP: POST /api/Student/1/MyClass/
         DATA: action=ADD&myclass=[1,2,3]

    iii) Removing more MyClass for a Student
         HTTP: POST /api/Student/1/MyClass/
         DATA: action=DEL&myclass=[1,2,3]



     i) Getting all Mark for a Student
         HTTP: GET /api/Student/1/Mark/

    ii) Adding more Mark for a Student
         HTTP: POST /api/Student/1/Mark/
         DATA: action=ADD&mark=[1,2,3]

    iii) Removing more Mark for a Student
         HTTP: POST /api/Student/1/Mark/
         DATA: action=DEL&mark=[1,2,3]



     i) Getting all Result for a Student
         HTTP: GET /api/Student/1/Result/

    ii) Adding more Result for a Student
         HTTP: POST /api/Student/1/Result/
         DATA: action=ADD&result=[1,2,3]

    iii) Removing more Result for a Student
         HTTP: POST /api/Student/1/Result/
         DATA: action=DEL&result=[1,2,3]



     i) Getting all Attendance for a Student
         HTTP: GET /api/Student/1/Attendance/

    ii) Adding more Attendance for a Student
         HTTP: POST /api/Student/1/Attendance/
         DATA: action=ADD&attendance=[1,2,3]

    iii) Removing more Attendance for a Student
         HTTP: POST /api/Student/1/Attendance/
         DATA: action=DEL&attendance=[1,2,3]



     i) Getting all Fees for a Student
         HTTP: GET /api/Student/1/Fees/

    ii) Adding more Fees for a Student
         HTTP: POST /api/Student/1/Fees/
         DATA: action=ADD&fees=[1,2,3]

    iii) Removing more Fees for a Student
         HTTP: POST /api/Student/1/Fees/
         DATA: action=DEL&fees=[1,2,3]



     i) Getting all Sport for a Student
         HTTP: GET /api/Student/1/Sport/

    ii) Adding more Sport for a Student
         HTTP: POST /api/Student/1/Sport/
         DATA: action=ADD&sport=[1,2,3]

    iii) Removing more Sport for a Student
         HTTP: POST /api/Student/1/Sport/
         DATA: action=DEL&sport=[1,2,3]



    x) Advance Search Example 
         HTTP: POST : http://192.168.56.101:7777/api/Author/aq/
         DATA : name=dipankar12322333&reg=1&tag1=%5B3%2C4%5D&action=APPEND
         orderBy=reg%2Cname&include=name%2Creg&name=%3Astartswith%3Aa
      1) Filter Data by startswith, endswith , exact, iexact etc.
          DATA format => and:startswith:abc OR <or:endswith:abc> like this
      2) Performing odrer by
         example  Data => oredrBy=name,reg 
      3) Only includes some colus
      Example1: find all item but show only name and reg column ? <include=name,reg> : OK
      4) Tag Serach :
      Example1: find all item having tag a and b and c ? Ans : <and:tagin:a,b,c> OK
      Example2: Find all item having tag a and b but not tag c ? Ans :  <and:tagin:a,b,-c> OK
      Example3: Find All item having tag a and b or tag c and d? Ans :  <and:tagin:a,b> <or:tagin:c,d> = OK
      Example4: Find All item doesn't have tag a ?                Ans  : <and:tagin:-a> OK




    xi) Min View 
    ===================
    Get Some Data Not all data from the table
    - It's Useful if yiu have lot of column in Student table.
         HTTP: GET : http://192.168.56.101:7777/api/Author/mv/
         DATA : page=10&limit=2


  7. Mark Func specifications
  ====================================
  7.1 Brief Description

  7.2 REST End point API specifications
     i) Creating a new Mark
         HTTP: POST /api/Mark/
         DATA: student=student,subject=subject,exam=exam,written=written,written=written,written=written,total=total,comment=comment,

    ii) Update a exiting Mark info
         HTTP: POST /api/Mark/1/
         DATA: student=student,subject=subject,exam=exam,written=written,written=written,written=written,total=total,comment=comment,

   iii) Getting an Mark info
         HTTP: GET /api/Mark/1/

    iv) Getting All Mark info
         HTTP: GET /api/Mark/
         DATA: student=student,subject=subject,exam=exam,written=written,written=written,written=written,total=total,comment=comment,

     v) search  All Mark info
         HTTP: GET /api/Mark/
         DATA: student=student,subject=subject,exam=exam,written=written,written=written,written=written,total=total,comment=comment,

    vi) Search using pagination of Mark data
         HTTP: GET /api/Mark/
         DATA: student=student,subject=subject,exam=exam,written=written,written=written,written=written,total=total,comment=comment,

  

    List of APIs to maintain relationship with other model
    =======================================================
    ( note that for O2O and Frn Key can be done through update Method )


     i) Getting all Student for a Mark
         HTTP: GET /api/Mark/1/Student/

    ii) Adding more Student for a Mark
         HTTP: POST /api/Mark/1/Student/
         DATA: action=ADD&student=[1,2,3]

    iii) Removing more Student for a Mark
         HTTP: POST /api/Mark/1/Student/
         DATA: action=DEL&student=[1,2,3]



     i) Getting all Subject for a Mark
         HTTP: GET /api/Mark/1/Subject/

    ii) Adding more Subject for a Mark
         HTTP: POST /api/Mark/1/Subject/
         DATA: action=ADD&subject=[1,2,3]

    iii) Removing more Subject for a Mark
         HTTP: POST /api/Mark/1/Subject/
         DATA: action=DEL&subject=[1,2,3]



     i) Getting all Exam for a Mark
         HTTP: GET /api/Mark/1/Exam/

    ii) Adding more Exam for a Mark
         HTTP: POST /api/Mark/1/Exam/
         DATA: action=ADD&exam=[1,2,3]

    iii) Removing more Exam for a Mark
         HTTP: POST /api/Mark/1/Exam/
         DATA: action=DEL&exam=[1,2,3]



    x) Advance Search Example 
         HTTP: POST : http://192.168.56.101:7777/api/Author/aq/
         DATA : name=dipankar12322333&reg=1&tag1=%5B3%2C4%5D&action=APPEND
         orderBy=reg%2Cname&include=name%2Creg&name=%3Astartswith%3Aa
      1) Filter Data by startswith, endswith , exact, iexact etc.
          DATA format => and:startswith:abc OR <or:endswith:abc> like this
      2) Performing odrer by
         example  Data => oredrBy=name,reg 
      3) Only includes some colus
      Example1: find all item but show only name and reg column ? <include=name,reg> : OK
      4) Tag Serach :
      Example1: find all item having tag a and b and c ? Ans : <and:tagin:a,b,c> OK
      Example2: Find all item having tag a and b but not tag c ? Ans :  <and:tagin:a,b,-c> OK
      Example3: Find All item having tag a and b or tag c and d? Ans :  <and:tagin:a,b> <or:tagin:c,d> = OK
      Example4: Find All item doesn't have tag a ?                Ans  : <and:tagin:-a> OK




    xi) Min View 
    ===================
    Get Some Data Not all data from the table
    - It's Useful if yiu have lot of column in Mark table.
         HTTP: GET : http://192.168.56.101:7777/api/Author/mv/
         DATA : page=10&limit=2


  8. Result Func specifications
  ====================================
  8.1 Brief Description

  8.2 REST End point API specifications
     i) Creating a new Result
         HTTP: POST /api/Result/
         DATA: exam=exam,division=division,total=total,percentage=percentage,division=division,comment=comment,

    ii) Update a exiting Result info
         HTTP: POST /api/Result/1/
         DATA: exam=exam,division=division,total=total,percentage=percentage,division=division,comment=comment,

   iii) Getting an Result info
         HTTP: GET /api/Result/1/

    iv) Getting All Result info
         HTTP: GET /api/Result/
         DATA: exam=exam,division=division,total=total,percentage=percentage,division=division,comment=comment,

     v) search  All Result info
         HTTP: GET /api/Result/
         DATA: exam=exam,division=division,total=total,percentage=percentage,division=division,comment=comment,

    vi) Search using pagination of Result data
         HTTP: GET /api/Result/
         DATA: exam=exam,division=division,total=total,percentage=percentage,division=division,comment=comment,

  

    List of APIs to maintain relationship with other model
    =======================================================
    ( note that for O2O and Frn Key can be done through update Method )


     i) Getting all Exam for a Result
         HTTP: GET /api/Result/1/Exam/

    ii) Adding more Exam for a Result
         HTTP: POST /api/Result/1/Exam/
         DATA: action=ADD&exam=[1,2,3]

    iii) Removing more Exam for a Result
         HTTP: POST /api/Result/1/Exam/
         DATA: action=DEL&exam=[1,2,3]



     i) Getting all Student for a Result
         HTTP: GET /api/Result/1/Student/

    ii) Adding more Student for a Result
         HTTP: POST /api/Result/1/Student/
         DATA: action=ADD&Student=[1,2,3]

    iii) Removing more Student for a Result
         HTTP: POST /api/Result/1/Student/
         DATA: action=DEL&Student=[1,2,3]



    x) Advance Search Example 
         HTTP: POST : http://192.168.56.101:7777/api/Author/aq/
         DATA : name=dipankar12322333&reg=1&tag1=%5B3%2C4%5D&action=APPEND
         orderBy=reg%2Cname&include=name%2Creg&name=%3Astartswith%3Aa
      1) Filter Data by startswith, endswith , exact, iexact etc.
          DATA format => and:startswith:abc OR <or:endswith:abc> like this
      2) Performing odrer by
         example  Data => oredrBy=name,reg 
      3) Only includes some colus
      Example1: find all item but show only name and reg column ? <include=name,reg> : OK
      4) Tag Serach :
      Example1: find all item having tag a and b and c ? Ans : <and:tagin:a,b,c> OK
      Example2: Find all item having tag a and b but not tag c ? Ans :  <and:tagin:a,b,-c> OK
      Example3: Find All item having tag a and b or tag c and d? Ans :  <and:tagin:a,b> <or:tagin:c,d> = OK
      Example4: Find All item doesn't have tag a ?                Ans  : <and:tagin:-a> OK




    xi) Min View 
    ===================
    Get Some Data Not all data from the table
    - It's Useful if yiu have lot of column in Result table.
         HTTP: GET : http://192.168.56.101:7777/api/Author/mv/
         DATA : page=10&limit=2


  9. Attendance Func specifications
  ====================================
  9.1 Brief Description

  9.2 REST End point API specifications
     i) Creating a new Attendance
         HTTP: POST /api/Attendance/
         DATA: student=student,myclass=myclass,total=total,percentage=percentage,comment=comment,

    ii) Update a exiting Attendance info
         HTTP: POST /api/Attendance/1/
         DATA: student=student,myclass=myclass,total=total,percentage=percentage,comment=comment,

   iii) Getting an Attendance info
         HTTP: GET /api/Attendance/1/

    iv) Getting All Attendance info
         HTTP: GET /api/Attendance/
         DATA: student=student,myclass=myclass,total=total,percentage=percentage,comment=comment,

     v) search  All Attendance info
         HTTP: GET /api/Attendance/
         DATA: student=student,myclass=myclass,total=total,percentage=percentage,comment=comment,

    vi) Search using pagination of Attendance data
         HTTP: GET /api/Attendance/
         DATA: student=student,myclass=myclass,total=total,percentage=percentage,comment=comment,

  

    List of APIs to maintain relationship with other model
    =======================================================
    ( note that for O2O and Frn Key can be done through update Method )


     i) Getting all Student for a Attendance
         HTTP: GET /api/Attendance/1/Student/

    ii) Adding more Student for a Attendance
         HTTP: POST /api/Attendance/1/Student/
         DATA: action=ADD&student=[1,2,3]

    iii) Removing more Student for a Attendance
         HTTP: POST /api/Attendance/1/Student/
         DATA: action=DEL&student=[1,2,3]



     i) Getting all MyClass for a Attendance
         HTTP: GET /api/Attendance/1/MyClass/

    ii) Adding more MyClass for a Attendance
         HTTP: POST /api/Attendance/1/MyClass/
         DATA: action=ADD&myclass=[1,2,3]

    iii) Removing more MyClass for a Attendance
         HTTP: POST /api/Attendance/1/MyClass/
         DATA: action=DEL&myclass=[1,2,3]



    x) Advance Search Example 
         HTTP: POST : http://192.168.56.101:7777/api/Author/aq/
         DATA : name=dipankar12322333&reg=1&tag1=%5B3%2C4%5D&action=APPEND
         orderBy=reg%2Cname&include=name%2Creg&name=%3Astartswith%3Aa
      1) Filter Data by startswith, endswith , exact, iexact etc.
          DATA format => and:startswith:abc OR <or:endswith:abc> like this
      2) Performing odrer by
         example  Data => oredrBy=name,reg 
      3) Only includes some colus
      Example1: find all item but show only name and reg column ? <include=name,reg> : OK
      4) Tag Serach :
      Example1: find all item having tag a and b and c ? Ans : <and:tagin:a,b,c> OK
      Example2: Find all item having tag a and b but not tag c ? Ans :  <and:tagin:a,b,-c> OK
      Example3: Find All item having tag a and b or tag c and d? Ans :  <and:tagin:a,b> <or:tagin:c,d> = OK
      Example4: Find All item doesn't have tag a ?                Ans  : <and:tagin:-a> OK




    xi) Min View 
    ===================
    Get Some Data Not all data from the table
    - It's Useful if yiu have lot of column in Attendance table.
         HTTP: GET : http://192.168.56.101:7777/api/Author/mv/
         DATA : page=10&limit=2


  10. Fees Func specifications
  ====================================
  10.1 Brief Description

  10.2 REST End point API specifications
     i) Creating a new Fees
         HTTP: POST /api/Fees/
         DATA: name=name,accid=accid,total=total,breakup=breakup,

    ii) Update a exiting Fees info
         HTTP: POST /api/Fees/1/
         DATA: name=name,accid=accid,total=total,breakup=breakup,

   iii) Getting an Fees info
         HTTP: GET /api/Fees/1/

    iv) Getting All Fees info
         HTTP: GET /api/Fees/
         DATA: name=name,accid=accid,total=total,breakup=breakup,

     v) search  All Fees info
         HTTP: GET /api/Fees/
         DATA: name=name,accid=accid,total=total,breakup=breakup,

    vi) Search using pagination of Fees data
         HTTP: GET /api/Fees/
         DATA: name=name,accid=accid,total=total,breakup=breakup,

  

    List of APIs to maintain relationship with other model
    =======================================================
    ( note that for O2O and Frn Key can be done through update Method )


     i) Getting all Student for a Fees
         HTTP: GET /api/Fees/1/Student/

    ii) Adding more Student for a Fees
         HTTP: POST /api/Fees/1/Student/
         DATA: action=ADD&Student=[1,2,3]

    iii) Removing more Student for a Fees
         HTTP: POST /api/Fees/1/Student/
         DATA: action=DEL&Student=[1,2,3]



    x) Advance Search Example 
         HTTP: POST : http://192.168.56.101:7777/api/Author/aq/
         DATA : name=dipankar12322333&reg=1&tag1=%5B3%2C4%5D&action=APPEND
         orderBy=reg%2Cname&include=name%2Creg&name=%3Astartswith%3Aa
      1) Filter Data by startswith, endswith , exact, iexact etc.
          DATA format => and:startswith:abc OR <or:endswith:abc> like this
      2) Performing odrer by
         example  Data => oredrBy=name,reg 
      3) Only includes some colus
      Example1: find all item but show only name and reg column ? <include=name,reg> : OK
      4) Tag Serach :
      Example1: find all item having tag a and b and c ? Ans : <and:tagin:a,b,c> OK
      Example2: Find all item having tag a and b but not tag c ? Ans :  <and:tagin:a,b,-c> OK
      Example3: Find All item having tag a and b or tag c and d? Ans :  <and:tagin:a,b> <or:tagin:c,d> = OK
      Example4: Find All item doesn't have tag a ?                Ans  : <and:tagin:-a> OK




    xi) Min View 
    ===================
    Get Some Data Not all data from the table
    - It's Useful if yiu have lot of column in Fees table.
         HTTP: GET : http://192.168.56.101:7777/api/Author/mv/
         DATA : page=10&limit=2


  11. Sport Func specifications
  ====================================
  11.1 Brief Description

  11.2 REST End point API specifications
     i) Creating a new Sport
         HTTP: POST /api/Sport/
         DATA: name=name,position=position,student=student,categories=categories,

    ii) Update a exiting Sport info
         HTTP: POST /api/Sport/1/
         DATA: name=name,position=position,student=student,categories=categories,

   iii) Getting an Sport info
         HTTP: GET /api/Sport/1/

    iv) Getting All Sport info
         HTTP: GET /api/Sport/
         DATA: name=name,position=position,student=student,categories=categories,

     v) search  All Sport info
         HTTP: GET /api/Sport/
         DATA: name=name,position=position,student=student,categories=categories,

    vi) Search using pagination of Sport data
         HTTP: GET /api/Sport/
         DATA: name=name,position=position,student=student,categories=categories,

  

    List of APIs to maintain relationship with other model
    =======================================================
    ( note that for O2O and Frn Key can be done through update Method )


     i) Getting all Student for a Sport
         HTTP: GET /api/Sport/1/Student/

    ii) Adding more Student for a Sport
         HTTP: POST /api/Sport/1/Student/
         DATA: action=ADD&student=[1,2,3]

    iii) Removing more Student for a Sport
         HTTP: POST /api/Sport/1/Student/
         DATA: action=DEL&student=[1,2,3]



    x) Advance Search Example 
         HTTP: POST : http://192.168.56.101:7777/api/Author/aq/
         DATA : name=dipankar12322333&reg=1&tag1=%5B3%2C4%5D&action=APPEND
         orderBy=reg%2Cname&include=name%2Creg&name=%3Astartswith%3Aa
      1) Filter Data by startswith, endswith , exact, iexact etc.
          DATA format => and:startswith:abc OR <or:endswith:abc> like this
      2) Performing odrer by
         example  Data => oredrBy=name,reg 
      3) Only includes some colus
      Example1: find all item but show only name and reg column ? <include=name,reg> : OK
      4) Tag Serach :
      Example1: find all item having tag a and b and c ? Ans : <and:tagin:a,b,c> OK
      Example2: Find all item having tag a and b but not tag c ? Ans :  <and:tagin:a,b,-c> OK
      Example3: Find All item having tag a and b or tag c and d? Ans :  <and:tagin:a,b> <or:tagin:c,d> = OK
      Example4: Find All item doesn't have tag a ?                Ans  : <and:tagin:-a> OK




    xi) Min View 
    ===================
    Get Some Data Not all data from the table
    - It's Useful if yiu have lot of column in Sport table.
         HTTP: GET : http://192.168.56.101:7777/api/Author/mv/
         DATA : page=10&limit=2


  12. Account Func specifications
  ====================================
  12.1 Brief Description

  12.2 REST End point API specifications
     i) Creating a new Account
         HTTP: POST /api/Account/
         DATA: name=name,email=email,password_hash=password_hash,salt_hash=salt_hash,active=active,clue=clue,

    ii) Update a exiting Account info
         HTTP: POST /api/Account/1/
         DATA: name=name,email=email,password_hash=password_hash,salt_hash=salt_hash,active=active,clue=clue,

   iii) Getting an Account info
         HTTP: GET /api/Account/1/

    iv) Getting All Account info
         HTTP: GET /api/Account/
         DATA: name=name,email=email,password_hash=password_hash,salt_hash=salt_hash,active=active,clue=clue,

     v) search  All Account info
         HTTP: GET /api/Account/
         DATA: name=name,email=email,password_hash=password_hash,salt_hash=salt_hash,active=active,clue=clue,

    vi) Search using pagination of Account data
         HTTP: GET /api/Account/
         DATA: name=name,email=email,password_hash=password_hash,salt_hash=salt_hash,active=active,clue=clue,

  

    List of APIs to maintain relationship with other model
    =======================================================
    ( note that for O2O and Frn Key can be done through update Method )


     i) Getting all Setting for a Account
         HTTP: GET /api/Account/1/Setting/

    ii) Adding more Setting for a Account
         HTTP: POST /api/Account/1/Setting/
         DATA: action=ADD&setting=[1,2,3]

    iii) Removing more Setting for a Account
         HTTP: POST /api/Account/1/Setting/
         DATA: action=DEL&setting=[1,2,3]



    x) Advance Search Example 
         HTTP: POST : http://192.168.56.101:7777/api/Author/aq/
         DATA : name=dipankar12322333&reg=1&tag1=%5B3%2C4%5D&action=APPEND
         orderBy=reg%2Cname&include=name%2Creg&name=%3Astartswith%3Aa
      1) Filter Data by startswith, endswith , exact, iexact etc.
          DATA format => and:startswith:abc OR <or:endswith:abc> like this
      2) Performing odrer by
         example  Data => oredrBy=name,reg 
      3) Only includes some colus
      Example1: find all item but show only name and reg column ? <include=name,reg> : OK
      4) Tag Serach :
      Example1: find all item having tag a and b and c ? Ans : <and:tagin:a,b,c> OK
      Example2: Find all item having tag a and b but not tag c ? Ans :  <and:tagin:a,b,-c> OK
      Example3: Find All item having tag a and b or tag c and d? Ans :  <and:tagin:a,b> <or:tagin:c,d> = OK
      Example4: Find All item doesn't have tag a ?                Ans  : <and:tagin:-a> OK




    xi) Min View 
    ===================
    Get Some Data Not all data from the table
    - It's Useful if yiu have lot of column in Account table.
         HTTP: GET : http://192.168.56.101:7777/api/Author/mv/
         DATA : page=10&limit=2


  13. Setting Func specifications
  ====================================
  13.1 Brief Description

  13.2 REST End point API specifications
     i) Creating a new Setting
         HTTP: POST /api/Setting/
         DATA: name=name,account=account,theme=theme,

    ii) Update a exiting Setting info
         HTTP: POST /api/Setting/1/
         DATA: name=name,account=account,theme=theme,

   iii) Getting an Setting info
         HTTP: GET /api/Setting/1/

    iv) Getting All Setting info
         HTTP: GET /api/Setting/
         DATA: name=name,account=account,theme=theme,

     v) search  All Setting info
         HTTP: GET /api/Setting/
         DATA: name=name,account=account,theme=theme,

    vi) Search using pagination of Setting data
         HTTP: GET /api/Setting/
         DATA: name=name,account=account,theme=theme,

  

    List of APIs to maintain relationship with other model
    =======================================================
    ( note that for O2O and Frn Key can be done through update Method )


     i) Getting all Account for a Setting
         HTTP: GET /api/Setting/1/Account/

    ii) Adding more Account for a Setting
         HTTP: POST /api/Setting/1/Account/
         DATA: action=ADD&account=[1,2,3]

    iii) Removing more Account for a Setting
         HTTP: POST /api/Setting/1/Account/
         DATA: action=DEL&account=[1,2,3]



    x) Advance Search Example 
         HTTP: POST : http://192.168.56.101:7777/api/Author/aq/
         DATA : name=dipankar12322333&reg=1&tag1=%5B3%2C4%5D&action=APPEND
         orderBy=reg%2Cname&include=name%2Creg&name=%3Astartswith%3Aa
      1) Filter Data by startswith, endswith , exact, iexact etc.
          DATA format => and:startswith:abc OR <or:endswith:abc> like this
      2) Performing odrer by
         example  Data => oredrBy=name,reg 
      3) Only includes some colus
      Example1: find all item but show only name and reg column ? <include=name,reg> : OK
      4) Tag Serach :
      Example1: find all item having tag a and b and c ? Ans : <and:tagin:a,b,c> OK
      Example2: Find all item having tag a and b but not tag c ? Ans :  <and:tagin:a,b,-c> OK
      Example3: Find All item having tag a and b or tag c and d? Ans :  <and:tagin:a,b> <or:tagin:c,d> = OK
      Example4: Find All item doesn't have tag a ?                Ans  : <and:tagin:-a> OK




    xi) Min View 
    ===================
    Get Some Data Not all data from the table
    - It's Useful if yiu have lot of column in Setting table.
         HTTP: GET : http://192.168.56.101:7777/api/Author/mv/
         DATA : page=10&limit=2


  14. Fund Func specifications
  ====================================
  14.1 Brief Description

  14.2 REST End point API specifications
     i) Creating a new Fund
         HTTP: POST /api/Fund/
         DATA: name=name,tenant=tenant,purpose=purpose,type=type,amount=amount,

    ii) Update a exiting Fund info
         HTTP: POST /api/Fund/1/
         DATA: name=name,tenant=tenant,purpose=purpose,type=type,amount=amount,

   iii) Getting an Fund info
         HTTP: GET /api/Fund/1/

    iv) Getting All Fund info
         HTTP: GET /api/Fund/
         DATA: name=name,tenant=tenant,purpose=purpose,type=type,amount=amount,

     v) search  All Fund info
         HTTP: GET /api/Fund/
         DATA: name=name,tenant=tenant,purpose=purpose,type=type,amount=amount,

    vi) Search using pagination of Fund data
         HTTP: GET /api/Fund/
         DATA: name=name,tenant=tenant,purpose=purpose,type=type,amount=amount,

  

    List of APIs to maintain relationship with other model
    =======================================================
    ( note that for O2O and Frn Key can be done through update Method )


    x) Advance Search Example 
         HTTP: POST : http://192.168.56.101:7777/api/Author/aq/
         DATA : name=dipankar12322333&reg=1&tag1=%5B3%2C4%5D&action=APPEND
         orderBy=reg%2Cname&include=name%2Creg&name=%3Astartswith%3Aa
      1) Filter Data by startswith, endswith , exact, iexact etc.
          DATA format => and:startswith:abc OR <or:endswith:abc> like this
      2) Performing odrer by
         example  Data => oredrBy=name,reg 
      3) Only includes some colus
      Example1: find all item but show only name and reg column ? <include=name,reg> : OK
      4) Tag Serach :
      Example1: find all item having tag a and b and c ? Ans : <and:tagin:a,b,c> OK
      Example2: Find all item having tag a and b but not tag c ? Ans :  <and:tagin:a,b,-c> OK
      Example3: Find All item having tag a and b or tag c and d? Ans :  <and:tagin:a,b> <or:tagin:c,d> = OK
      Example4: Find All item doesn't have tag a ?                Ans  : <and:tagin:-a> OK




    xi) Min View 
    ===================
    Get Some Data Not all data from the table
    - It's Useful if yiu have lot of column in Fund table.
         HTTP: GET : http://192.168.56.101:7777/api/Author/mv/
         DATA : page=10&limit=2


  15. Book Func specifications
  ====================================
  15.1 Brief Description

  15.2 REST End point API specifications
     i) Creating a new Book
         HTTP: POST /api/Book/
         DATA: name=name,author=author,desc=desc,count=count,price=price,categories=categories,

    ii) Update a exiting Book info
         HTTP: POST /api/Book/1/
         DATA: name=name,author=author,desc=desc,count=count,price=price,categories=categories,

   iii) Getting an Book info
         HTTP: GET /api/Book/1/

    iv) Getting All Book info
         HTTP: GET /api/Book/
         DATA: name=name,author=author,desc=desc,count=count,price=price,categories=categories,

     v) search  All Book info
         HTTP: GET /api/Book/
         DATA: name=name,author=author,desc=desc,count=count,price=price,categories=categories,

    vi) Search using pagination of Book data
         HTTP: GET /api/Book/
         DATA: name=name,author=author,desc=desc,count=count,price=price,categories=categories,

  

    List of APIs to maintain relationship with other model
    =======================================================
    ( note that for O2O and Frn Key can be done through update Method )


    x) Advance Search Example 
         HTTP: POST : http://192.168.56.101:7777/api/Author/aq/
         DATA : name=dipankar12322333&reg=1&tag1=%5B3%2C4%5D&action=APPEND
         orderBy=reg%2Cname&include=name%2Creg&name=%3Astartswith%3Aa
      1) Filter Data by startswith, endswith , exact, iexact etc.
          DATA format => and:startswith:abc OR <or:endswith:abc> like this
      2) Performing odrer by
         example  Data => oredrBy=name,reg 
      3) Only includes some colus
      Example1: find all item but show only name and reg column ? <include=name,reg> : OK
      4) Tag Serach :
      Example1: find all item having tag a and b and c ? Ans : <and:tagin:a,b,c> OK
      Example2: Find all item having tag a and b but not tag c ? Ans :  <and:tagin:a,b,-c> OK
      Example3: Find All item having tag a and b or tag c and d? Ans :  <and:tagin:a,b> <or:tagin:c,d> = OK
      Example4: Find All item doesn't have tag a ?                Ans  : <and:tagin:-a> OK




    xi) Min View 
    ===================
    Get Some Data Not all data from the table
    - It's Useful if yiu have lot of column in Book table.
         HTTP: GET : http://192.168.56.101:7777/api/Author/mv/
         DATA : page=10&limit=2


  16. Event Func specifications
  ====================================
  16.1 Brief Description

  16.2 REST End point API specifications
     i) Creating a new Event
         HTTP: POST /api/Event/
         DATA: name=name,details=details,categories=categories,date=date,

    ii) Update a exiting Event info
         HTTP: POST /api/Event/1/
         DATA: name=name,details=details,categories=categories,date=date,

   iii) Getting an Event info
         HTTP: GET /api/Event/1/

    iv) Getting All Event info
         HTTP: GET /api/Event/
         DATA: name=name,details=details,categories=categories,date=date,

     v) search  All Event info
         HTTP: GET /api/Event/
         DATA: name=name,details=details,categories=categories,date=date,

    vi) Search using pagination of Event data
         HTTP: GET /api/Event/
         DATA: name=name,details=details,categories=categories,date=date,

  

    List of APIs to maintain relationship with other model
    =======================================================
    ( note that for O2O and Frn Key can be done through update Method )


    x) Advance Search Example 
         HTTP: POST : http://192.168.56.101:7777/api/Author/aq/
         DATA : name=dipankar12322333&reg=1&tag1=%5B3%2C4%5D&action=APPEND
         orderBy=reg%2Cname&include=name%2Creg&name=%3Astartswith%3Aa
      1) Filter Data by startswith, endswith , exact, iexact etc.
          DATA format => and:startswith:abc OR <or:endswith:abc> like this
      2) Performing odrer by
         example  Data => oredrBy=name,reg 
      3) Only includes some colus
      Example1: find all item but show only name and reg column ? <include=name,reg> : OK
      4) Tag Serach :
      Example1: find all item having tag a and b and c ? Ans : <and:tagin:a,b,c> OK
      Example2: Find all item having tag a and b but not tag c ? Ans :  <and:tagin:a,b,-c> OK
      Example3: Find All item having tag a and b or tag c and d? Ans :  <and:tagin:a,b> <or:tagin:c,d> = OK
      Example4: Find All item doesn't have tag a ?                Ans  : <and:tagin:-a> OK




    xi) Min View 
    ===================
    Get Some Data Not all data from the table
    - It's Useful if yiu have lot of column in Event table.
         HTTP: GET : http://192.168.56.101:7777/api/Author/mv/
         DATA : page=10&limit=2


  17. Discipline Func specifications
  ====================================
  17.1 Brief Description

  17.2 REST End point API specifications
     i) Creating a new Discipline
         HTTP: POST /api/Discipline/
         DATA: name=name,details=details,categories=categories,

    ii) Update a exiting Discipline info
         HTTP: POST /api/Discipline/1/
         DATA: name=name,details=details,categories=categories,

   iii) Getting an Discipline info
         HTTP: GET /api/Discipline/1/

    iv) Getting All Discipline info
         HTTP: GET /api/Discipline/
         DATA: name=name,details=details,categories=categories,

     v) search  All Discipline info
         HTTP: GET /api/Discipline/
         DATA: name=name,details=details,categories=categories,

    vi) Search using pagination of Discipline data
         HTTP: GET /api/Discipline/
         DATA: name=name,details=details,categories=categories,

  

    List of APIs to maintain relationship with other model
    =======================================================
    ( note that for O2O and Frn Key can be done through update Method )


    x) Advance Search Example 
         HTTP: POST : http://192.168.56.101:7777/api/Author/aq/
         DATA : name=dipankar12322333&reg=1&tag1=%5B3%2C4%5D&action=APPEND
         orderBy=reg%2Cname&include=name%2Creg&name=%3Astartswith%3Aa
      1) Filter Data by startswith, endswith , exact, iexact etc.
          DATA format => and:startswith:abc OR <or:endswith:abc> like this
      2) Performing odrer by
         example  Data => oredrBy=name,reg 
      3) Only includes some colus
      Example1: find all item but show only name and reg column ? <include=name,reg> : OK
      4) Tag Serach :
      Example1: find all item having tag a and b and c ? Ans : <and:tagin:a,b,c> OK
      Example2: Find all item having tag a and b but not tag c ? Ans :  <and:tagin:a,b,-c> OK
      Example3: Find All item having tag a and b or tag c and d? Ans :  <and:tagin:a,b> <or:tagin:c,d> = OK
      Example4: Find All item doesn't have tag a ?                Ans  : <and:tagin:-a> OK




    xi) Min View 
    ===================
    Get Some Data Not all data from the table
    - It's Useful if yiu have lot of column in Discipline table.
         HTTP: GET : http://192.168.56.101:7777/api/Author/mv/
         DATA : page=10&limit=2


  18. Notice Func specifications
  ====================================
  18.1 Brief Description

  18.2 REST End point API specifications
     i) Creating a new Notice
         HTTP: POST /api/Notice/
         DATA: title=title,details=details,categories=categories,

    ii) Update a exiting Notice info
         HTTP: POST /api/Notice/1/
         DATA: title=title,details=details,categories=categories,

   iii) Getting an Notice info
         HTTP: GET /api/Notice/1/

    iv) Getting All Notice info
         HTTP: GET /api/Notice/
         DATA: title=title,details=details,categories=categories,

     v) search  All Notice info
         HTTP: GET /api/Notice/
         DATA: title=title,details=details,categories=categories,

    vi) Search using pagination of Notice data
         HTTP: GET /api/Notice/
         DATA: title=title,details=details,categories=categories,

  

    List of APIs to maintain relationship with other model
    =======================================================
    ( note that for O2O and Frn Key can be done through update Method )


    x) Advance Search Example 
         HTTP: POST : http://192.168.56.101:7777/api/Author/aq/
         DATA : name=dipankar12322333&reg=1&tag1=%5B3%2C4%5D&action=APPEND
         orderBy=reg%2Cname&include=name%2Creg&name=%3Astartswith%3Aa
      1) Filter Data by startswith, endswith , exact, iexact etc.
          DATA format => and:startswith:abc OR <or:endswith:abc> like this
      2) Performing odrer by
         example  Data => oredrBy=name,reg 
      3) Only includes some colus
      Example1: find all item but show only name and reg column ? <include=name,reg> : OK
      4) Tag Serach :
      Example1: find all item having tag a and b and c ? Ans : <and:tagin:a,b,c> OK
      Example2: Find all item having tag a and b but not tag c ? Ans :  <and:tagin:a,b,-c> OK
      Example3: Find All item having tag a and b or tag c and d? Ans :  <and:tagin:a,b> <or:tagin:c,d> = OK
      Example4: Find All item doesn't have tag a ?                Ans  : <and:tagin:-a> OK




    xi) Min View 
    ===================
    Get Some Data Not all data from the table
    - It's Useful if yiu have lot of column in Notice table.
         HTTP: GET : http://192.168.56.101:7777/api/Author/mv/
         DATA : page=10&limit=2


  19. Instrument Func specifications
  ====================================
  19.1 Brief Description

  19.2 REST End point API specifications
     i) Creating a new Instrument
         HTTP: POST /api/Instrument/
         DATA: name=name,details=details,categories=categories,count=count,

    ii) Update a exiting Instrument info
         HTTP: POST /api/Instrument/1/
         DATA: name=name,details=details,categories=categories,count=count,

   iii) Getting an Instrument info
         HTTP: GET /api/Instrument/1/

    iv) Getting All Instrument info
         HTTP: GET /api/Instrument/
         DATA: name=name,details=details,categories=categories,count=count,

     v) search  All Instrument info
         HTTP: GET /api/Instrument/
         DATA: name=name,details=details,categories=categories,count=count,

    vi) Search using pagination of Instrument data
         HTTP: GET /api/Instrument/
         DATA: name=name,details=details,categories=categories,count=count,

  

    List of APIs to maintain relationship with other model
    =======================================================
    ( note that for O2O and Frn Key can be done through update Method )


    x) Advance Search Example 
         HTTP: POST : http://192.168.56.101:7777/api/Author/aq/
         DATA : name=dipankar12322333&reg=1&tag1=%5B3%2C4%5D&action=APPEND
         orderBy=reg%2Cname&include=name%2Creg&name=%3Astartswith%3Aa
      1) Filter Data by startswith, endswith , exact, iexact etc.
          DATA format => and:startswith:abc OR <or:endswith:abc> like this
      2) Performing odrer by
         example  Data => oredrBy=name,reg 
      3) Only includes some colus
      Example1: find all item but show only name and reg column ? <include=name,reg> : OK
      4) Tag Serach :
      Example1: find all item having tag a and b and c ? Ans : <and:tagin:a,b,c> OK
      Example2: Find all item having tag a and b but not tag c ? Ans :  <and:tagin:a,b,-c> OK
      Example3: Find All item having tag a and b or tag c and d? Ans :  <and:tagin:a,b> <or:tagin:c,d> = OK
      Example4: Find All item doesn't have tag a ?                Ans  : <and:tagin:-a> OK




    xi) Min View 
    ===================
    Get Some Data Not all data from the table
    - It's Useful if yiu have lot of column in Instrument table.
         HTTP: GET : http://192.168.56.101:7777/api/Author/mv/
         DATA : page=10&limit=2

